// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Symbology.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace symbology {

namespace {

const ::google::protobuf::Descriptor* Country_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Country_reflection_ = NULL;
const ::google::protobuf::Descriptor* CountrySeries_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CountrySeries_reflection_ = NULL;
const ::google::protobuf::Descriptor* Currency_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Currency_reflection_ = NULL;
const ::google::protobuf::Descriptor* CurrencySeries_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CurrencySeries_reflection_ = NULL;
const ::google::protobuf::Descriptor* Market_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Market_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketSeries_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketSeries_reflection_ = NULL;
const ::google::protobuf::Descriptor* Instrument_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Instrument_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstrumentSeries_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstrumentSeries_reflection_ = NULL;
const ::google::protobuf::Descriptor* CounterParty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CounterParty_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CounterParty_type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CounterPartySeries_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CounterPartySeries_reflection_ = NULL;
const ::google::protobuf::Descriptor* Company_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Company_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompanySeries_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompanySeries_reflection_ = NULL;
const ::google::protobuf::Descriptor* Security_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Security_reflection_ = NULL;
const ::google::protobuf::Descriptor* SecuritySeries_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SecuritySeries_reflection_ = NULL;
const ::google::protobuf::Descriptor* Symbol_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Symbol_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Symbol_type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SymbolSeries_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SymbolSeries_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExchangeRate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExchangeRate_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExchangeRateSeries_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExchangeRateSeries_reflection_ = NULL;
const ::google::protobuf::Descriptor* Price_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Price_reflection_ = NULL;
const ::google::protobuf::Descriptor* PriceSeries_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PriceSeries_reflection_ = NULL;
const ::google::protobuf::Descriptor* Event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventSeries_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventSeries_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Symbology_2eproto() {
  protobuf_AddDesc_Symbology_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Symbology.proto");
  GOOGLE_CHECK(file != NULL);
  Country_descriptor_ = file->message_type(0);
  static const int Country_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Country, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Country, revision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Country, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Country, isonumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Country, iso2code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Country, iso3code_),
  };
  Country_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Country_descriptor_,
      Country::default_instance_,
      Country_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Country, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Country, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Country));
  CountrySeries_descriptor_ = file->message_type(1);
  static const int CountrySeries_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountrySeries, country_),
  };
  CountrySeries_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CountrySeries_descriptor_,
      CountrySeries::default_instance_,
      CountrySeries_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountrySeries, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountrySeries, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CountrySeries));
  Currency_descriptor_ = file->message_type(2);
  static const int Currency_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Currency, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Currency, revision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Currency, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Currency, isonumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Currency, isocode_),
  };
  Currency_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Currency_descriptor_,
      Currency::default_instance_,
      Currency_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Currency, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Currency, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Currency));
  CurrencySeries_descriptor_ = file->message_type(3);
  static const int CurrencySeries_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrencySeries, currency_),
  };
  CurrencySeries_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CurrencySeries_descriptor_,
      CurrencySeries::default_instance_,
      CurrencySeries_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrencySeries, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrencySeries, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CurrencySeries));
  Market_descriptor_ = file->message_type(4);
  static const int Market_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Market, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Market, revision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Market, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Market, isocode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Market, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Market, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Market, website_),
  };
  Market_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Market_descriptor_,
      Market::default_instance_,
      Market_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Market, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Market, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Market));
  MarketSeries_descriptor_ = file->message_type(5);
  static const int MarketSeries_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketSeries, market_),
  };
  MarketSeries_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketSeries_descriptor_,
      MarketSeries::default_instance_,
      MarketSeries_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketSeries, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketSeries, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketSeries));
  Instrument_descriptor_ = file->message_type(6);
  static const int Instrument_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, revision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, parentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, name_),
  };
  Instrument_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Instrument_descriptor_,
      Instrument::default_instance_,
      Instrument_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Instrument));
  InstrumentSeries_descriptor_ = file->message_type(7);
  static const int InstrumentSeries_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentSeries, instrument_),
  };
  InstrumentSeries_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstrumentSeries_descriptor_,
      InstrumentSeries::default_instance_,
      InstrumentSeries_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentSeries, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentSeries, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstrumentSeries));
  CounterParty_descriptor_ = file->message_type(8);
  static const int CounterParty_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterParty, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterParty, revision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterParty, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterParty, isocode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterParty, website_),
  };
  CounterParty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CounterParty_descriptor_,
      CounterParty::default_instance_,
      CounterParty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterParty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterParty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CounterParty));
  CounterParty_type_descriptor_ = CounterParty_descriptor_->enum_type(0);
  CounterPartySeries_descriptor_ = file->message_type(9);
  static const int CounterPartySeries_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterPartySeries, counterparty_),
  };
  CounterPartySeries_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CounterPartySeries_descriptor_,
      CounterPartySeries::default_instance_,
      CounterPartySeries_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterPartySeries, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterPartySeries, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CounterPartySeries));
  Company_descriptor_ = file->message_type(10);
  static const int Company_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Company, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Company, revision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Company, name_),
  };
  Company_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Company_descriptor_,
      Company::default_instance_,
      Company_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Company, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Company, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Company));
  CompanySeries_descriptor_ = file->message_type(11);
  static const int CompanySeries_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompanySeries, company_),
  };
  CompanySeries_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CompanySeries_descriptor_,
      CompanySeries::default_instance_,
      CompanySeries_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompanySeries, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompanySeries, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CompanySeries));
  Security_descriptor_ = file->message_type(12);
  static const int Security_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Security, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Security, revision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Security, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Security, instrument_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Security, company_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Security, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Security, strike_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Security, expirationdate_),
  };
  Security_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Security_descriptor_,
      Security::default_instance_,
      Security_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Security, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Security, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Security));
  SecuritySeries_descriptor_ = file->message_type(13);
  static const int SecuritySeries_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecuritySeries, security_),
  };
  SecuritySeries_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SecuritySeries_descriptor_,
      SecuritySeries::default_instance_,
      SecuritySeries_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecuritySeries, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecuritySeries, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SecuritySeries));
  Symbol_descriptor_ = file->message_type(14);
  static const int Symbol_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Symbol, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Symbol, revision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Symbol, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Symbol, security_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Symbol, counterparty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Symbol, name_),
  };
  Symbol_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Symbol_descriptor_,
      Symbol::default_instance_,
      Symbol_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Symbol, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Symbol, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Symbol));
  Symbol_type_descriptor_ = Symbol_descriptor_->enum_type(0);
  SymbolSeries_descriptor_ = file->message_type(15);
  static const int SymbolSeries_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolSeries, symbol_),
  };
  SymbolSeries_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SymbolSeries_descriptor_,
      SymbolSeries::default_instance_,
      SymbolSeries_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolSeries, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolSeries, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SymbolSeries));
  ExchangeRate_descriptor_ = file->message_type(16);
  static const int ExchangeRate_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeRate, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeRate, revision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeRate, tocurrency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeRate, fromcurrency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeRate, counterparty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeRate, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeRate, rate_),
  };
  ExchangeRate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExchangeRate_descriptor_,
      ExchangeRate::default_instance_,
      ExchangeRate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeRate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeRate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExchangeRate));
  ExchangeRateSeries_descriptor_ = file->message_type(17);
  static const int ExchangeRateSeries_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeRateSeries, exchangerate_),
  };
  ExchangeRateSeries_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExchangeRateSeries_descriptor_,
      ExchangeRateSeries::default_instance_,
      ExchangeRateSeries_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeRateSeries, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeRateSeries, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExchangeRateSeries));
  Price_descriptor_ = file->message_type(18);
  static const int Price_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Price, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Price, revision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Price, security_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Price, counterparty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Price, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Price, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Price, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Price, ask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Price, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Price, close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Price, high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Price, low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Price, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Price, return__),
  };
  Price_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Price_descriptor_,
      Price::default_instance_,
      Price_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Price, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Price, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Price));
  PriceSeries_descriptor_ = file->message_type(19);
  static const int PriceSeries_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceSeries, price_),
  };
  PriceSeries_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PriceSeries_descriptor_,
      PriceSeries::default_instance_,
      PriceSeries_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceSeries, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceSeries, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PriceSeries));
  Event_descriptor_ = file->message_type(20);
  static const int Event_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, revision_),
  };
  Event_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Event_descriptor_,
      Event::default_instance_,
      Event_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Event));
  EventSeries_descriptor_ = file->message_type(21);
  static const int EventSeries_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventSeries, event_),
  };
  EventSeries_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventSeries_descriptor_,
      EventSeries::default_instance_,
      EventSeries_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventSeries, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventSeries, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventSeries));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Symbology_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Country_descriptor_, &Country::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CountrySeries_descriptor_, &CountrySeries::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Currency_descriptor_, &Currency::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CurrencySeries_descriptor_, &CurrencySeries::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Market_descriptor_, &Market::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketSeries_descriptor_, &MarketSeries::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Instrument_descriptor_, &Instrument::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstrumentSeries_descriptor_, &InstrumentSeries::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CounterParty_descriptor_, &CounterParty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CounterPartySeries_descriptor_, &CounterPartySeries::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Company_descriptor_, &Company::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CompanySeries_descriptor_, &CompanySeries::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Security_descriptor_, &Security::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SecuritySeries_descriptor_, &SecuritySeries::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Symbol_descriptor_, &Symbol::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SymbolSeries_descriptor_, &SymbolSeries::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExchangeRate_descriptor_, &ExchangeRate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExchangeRateSeries_descriptor_, &ExchangeRateSeries::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Price_descriptor_, &Price::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PriceSeries_descriptor_, &PriceSeries::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Event_descriptor_, &Event::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventSeries_descriptor_, &EventSeries::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Symbology_2eproto() {
  delete Country::default_instance_;
  delete Country_reflection_;
  delete CountrySeries::default_instance_;
  delete CountrySeries_reflection_;
  delete Currency::default_instance_;
  delete Currency_reflection_;
  delete CurrencySeries::default_instance_;
  delete CurrencySeries_reflection_;
  delete Market::default_instance_;
  delete Market_reflection_;
  delete MarketSeries::default_instance_;
  delete MarketSeries_reflection_;
  delete Instrument::default_instance_;
  delete Instrument_reflection_;
  delete InstrumentSeries::default_instance_;
  delete InstrumentSeries_reflection_;
  delete CounterParty::default_instance_;
  delete CounterParty_reflection_;
  delete CounterPartySeries::default_instance_;
  delete CounterPartySeries_reflection_;
  delete Company::default_instance_;
  delete Company_reflection_;
  delete CompanySeries::default_instance_;
  delete CompanySeries_reflection_;
  delete Security::default_instance_;
  delete Security_reflection_;
  delete SecuritySeries::default_instance_;
  delete SecuritySeries_reflection_;
  delete Symbol::default_instance_;
  delete Symbol_reflection_;
  delete SymbolSeries::default_instance_;
  delete SymbolSeries_reflection_;
  delete ExchangeRate::default_instance_;
  delete ExchangeRate_reflection_;
  delete ExchangeRateSeries::default_instance_;
  delete ExchangeRateSeries_reflection_;
  delete Price::default_instance_;
  delete Price_reflection_;
  delete PriceSeries::default_instance_;
  delete PriceSeries_reflection_;
  delete Event::default_instance_;
  delete Event_reflection_;
  delete EventSeries::default_instance_;
  delete EventSeries_reflection_;
}

void protobuf_AddDesc_Symbology_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_Revision_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017Symbology.proto\022\tsymbology\032\016Revision.p"
    "roto\"w\n\007Country\022\n\n\002id\030\001 \001(\005\022\033\n\010revision\030"
    "\002 \001(\0132\t.Revision\022\014\n\004name\030\003 \001(\t\022\021\n\tisoNum"
    "ber\030\004 \001(\005\022\020\n\010iso2Code\030\005 \001(\t\022\020\n\010iso3Code\030"
    "\006 \001(\t\"4\n\rCountrySeries\022#\n\007country\030\001 \003(\0132"
    "\022.symbology.Country\"e\n\010Currency\022\n\n\002id\030\001 "
    "\001(\005\022\033\n\010revision\030\002 \001(\0132\t.Revision\022\014\n\004name"
    "\030\003 \001(\t\022\021\n\tisoNumber\030\004 \001(\005\022\017\n\007isoCode\030\005 \001"
    "(\t\"7\n\016CurrencySeries\022%\n\010currency\030\001 \003(\0132\023"
    ".symbology.Currency\"\224\001\n\006Market\022\n\n\002id\030\001 \001"
    "(\005\022\033\n\010revision\030\002 \001(\0132\t.Revision\022\014\n\004name\030"
    "\003 \001(\t\022\017\n\007isoCode\030\004 \001(\t\022#\n\007country\030\005 \001(\0132"
    "\022.symbology.Country\022\014\n\004city\030\006 \001(\t\022\017\n\007web"
    "site\030\007 \001(\t\"1\n\014MarketSeries\022!\n\006market\030\001 \003"
    "(\0132\021.symbology.Market\"U\n\nInstrument\022\n\n\002i"
    "d\030\001 \001(\005\022\033\n\010revision\030\002 \001(\0132\t.Revision\022\020\n\010"
    "parentId\030\003 \001(\005\022\014\n\004name\030\004 \001(\t\"=\n\020Instrume"
    "ntSeries\022)\n\ninstrument\030\001 \003(\0132\025.symbology"
    ".Instrument\"\223\001\n\014CounterParty\022\n\n\002id\030\001 \001(\005"
    "\022\033\n\010revision\030\002 \001(\0132\t.Revision\022\014\n\004name\030\003 "
    "\001(\t\022\017\n\007isoCode\030\004 \001(\t\022\017\n\007website\030\005 \001(\t\"*\n"
    "\004type\022\007\n\003ISO\020\000\022\r\n\tSYNTHETIC\020\001\022\n\n\006BROKER\020"
    "\002\"C\n\022CounterPartySeries\022-\n\014counterParty\030"
    "\001 \003(\0132\027.symbology.CounterParty\"@\n\007Compan"
    "y\022\n\n\002id\030\001 \001(\005\022\033\n\010revision\030\002 \001(\0132\t.Revisi"
    "on\022\014\n\004name\030\003 \001(\t\"4\n\rCompanySeries\022#\n\007com"
    "pany\030\001 \003(\0132\022.symbology.Company\"\340\001\n\010Secur"
    "ity\022\n\n\002id\030\001 \001(\005\022\033\n\010revision\030\002 \001(\0132\t.Revi"
    "sion\022\014\n\004name\030\003 \001(\t\022)\n\ninstrument\030\004 \001(\0132\025"
    ".symbology.Instrument\022#\n\007company\030\005 \001(\0132\022"
    ".symbology.Company\022%\n\010currency\030\006 \001(\0132\023.s"
    "ymbology.Currency\022\016\n\006strike\030\007 \001(\005\022\026\n\016exp"
    "irationDate\030\010 \001(\005\"7\n\016SecuritySeries\022%\n\010s"
    "ecurity\030\001 \003(\0132\023.symbology.Security\"\360\001\n\006S"
    "ymbol\022\n\n\002id\030\001 \001(\005\022\033\n\010revision\030\002 \001(\0132\t.Re"
    "vision\022%\n\010currency\030\003 \001(\0132\023.symbology.Cur"
    "rency\022%\n\010security\030\004 \001(\0132\023.symbology.Secu"
    "rity\022-\n\014counterParty\030\005 \001(\0132\027.symbology.C"
    "ounterParty\022\014\n\004name\030\006 \001(\t\"2\n\004type\022\t\n\005CUS"
    "IP\020\000\022\010\n\004ISIN\020\001\022\t\n\005SEDOL\020\002\022\n\n\006VENDOR\020\003\"1\n"
    "\014SymbolSeries\022!\n\006symbol\030\001 \003(\0132\021.symbolog"
    "y.Symbol\"\326\001\n\014ExchangeRate\022\n\n\002id\030\001 \001(\005\022\033\n"
    "\010revision\030\002 \001(\0132\t.Revision\022\'\n\ntoCurrency"
    "\030\003 \001(\0132\023.symbology.Currency\022)\n\014fromCurre"
    "ncy\030\004 \001(\0132\023.symbology.Currency\022-\n\014counte"
    "rParty\030\005 \001(\0132\027.symbology.CounterParty\022\014\n"
    "\004time\030\006 \001(\003\022\014\n\004rate\030\007 \001(\005\"C\n\022ExchangeRat"
    "eSeries\022-\n\014exchangeRate\030\001 \003(\0132\027.symbolog"
    "y.ExchangeRate\"\255\002\n\005Price\022\n\n\002id\030\001 \001(\005\022\033\n\010"
    "revision\030\002 \001(\0132\t.Revision\022%\n\010security\030\003 "
    "\001(\0132\023.symbology.Security\022-\n\014counterParty"
    "\030\004 \001(\0132\027.symbology.CounterParty\022%\n\010curre"
    "ncy\030\005 \001(\0132\023.symbology.Currency\022\014\n\004date\030\006"
    " \001(\005\022\013\n\003bid\030\007 \001(\005\022\013\n\003ask\030\010 \001(\005\022\014\n\004open\030\t"
    " \001(\005\022\r\n\005close\030\n \001(\005\022\014\n\004high\030\013 \001(\005\022\013\n\003low"
    "\030\014 \001(\005\022\016\n\006volume\030\r \001(\005\022\016\n\006return\030\016 \001(\005\"."
    "\n\013PriceSeries\022\037\n\005price\030\001 \003(\0132\020.symbology"
    ".Price\"0\n\005Event\022\n\n\002id\030\001 \001(\005\022\033\n\010revision\030"
    "\002 \001(\0132\t.Revision\".\n\013EventSeries\022\037\n\005event"
    "\030\001 \003(\0132\020.symbology.Event", 2384);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Symbology.proto", &protobuf_RegisterTypes);
  Country::default_instance_ = new Country();
  CountrySeries::default_instance_ = new CountrySeries();
  Currency::default_instance_ = new Currency();
  CurrencySeries::default_instance_ = new CurrencySeries();
  Market::default_instance_ = new Market();
  MarketSeries::default_instance_ = new MarketSeries();
  Instrument::default_instance_ = new Instrument();
  InstrumentSeries::default_instance_ = new InstrumentSeries();
  CounterParty::default_instance_ = new CounterParty();
  CounterPartySeries::default_instance_ = new CounterPartySeries();
  Company::default_instance_ = new Company();
  CompanySeries::default_instance_ = new CompanySeries();
  Security::default_instance_ = new Security();
  SecuritySeries::default_instance_ = new SecuritySeries();
  Symbol::default_instance_ = new Symbol();
  SymbolSeries::default_instance_ = new SymbolSeries();
  ExchangeRate::default_instance_ = new ExchangeRate();
  ExchangeRateSeries::default_instance_ = new ExchangeRateSeries();
  Price::default_instance_ = new Price();
  PriceSeries::default_instance_ = new PriceSeries();
  Event::default_instance_ = new Event();
  EventSeries::default_instance_ = new EventSeries();
  Country::default_instance_->InitAsDefaultInstance();
  CountrySeries::default_instance_->InitAsDefaultInstance();
  Currency::default_instance_->InitAsDefaultInstance();
  CurrencySeries::default_instance_->InitAsDefaultInstance();
  Market::default_instance_->InitAsDefaultInstance();
  MarketSeries::default_instance_->InitAsDefaultInstance();
  Instrument::default_instance_->InitAsDefaultInstance();
  InstrumentSeries::default_instance_->InitAsDefaultInstance();
  CounterParty::default_instance_->InitAsDefaultInstance();
  CounterPartySeries::default_instance_->InitAsDefaultInstance();
  Company::default_instance_->InitAsDefaultInstance();
  CompanySeries::default_instance_->InitAsDefaultInstance();
  Security::default_instance_->InitAsDefaultInstance();
  SecuritySeries::default_instance_->InitAsDefaultInstance();
  Symbol::default_instance_->InitAsDefaultInstance();
  SymbolSeries::default_instance_->InitAsDefaultInstance();
  ExchangeRate::default_instance_->InitAsDefaultInstance();
  ExchangeRateSeries::default_instance_->InitAsDefaultInstance();
  Price::default_instance_->InitAsDefaultInstance();
  PriceSeries::default_instance_->InitAsDefaultInstance();
  Event::default_instance_->InitAsDefaultInstance();
  EventSeries::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Symbology_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Symbology_2eproto {
  StaticDescriptorInitializer_Symbology_2eproto() {
    protobuf_AddDesc_Symbology_2eproto();
  }
} static_descriptor_initializer_Symbology_2eproto_;


// ===================================================================

const ::std::string Country::_default_name_;
const ::std::string Country::_default_iso2code_;
const ::std::string Country::_default_iso3code_;
#ifndef _MSC_VER
const int Country::kIdFieldNumber;
const int Country::kRevisionFieldNumber;
const int Country::kNameFieldNumber;
const int Country::kIsoNumberFieldNumber;
const int Country::kIso2CodeFieldNumber;
const int Country::kIso3CodeFieldNumber;
#endif  // !_MSC_VER

Country::Country()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Country::InitAsDefaultInstance() {
  revision_ = const_cast< ::Revision*>(&::Revision::default_instance());
}

Country::Country(const Country& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Country::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  revision_ = NULL;
  name_ = const_cast< ::std::string*>(&_default_name_);
  isonumber_ = 0;
  iso2code_ = const_cast< ::std::string*>(&_default_iso2code_);
  iso3code_ = const_cast< ::std::string*>(&_default_iso3code_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Country::~Country() {
  SharedDtor();
}

void Country::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (iso2code_ != &_default_iso2code_) {
    delete iso2code_;
  }
  if (iso3code_ != &_default_iso3code_) {
    delete iso3code_;
  }
  if (this != default_instance_) {
    delete revision_;
  }
}

void Country::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Country::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Country_descriptor_;
}

const Country& Country::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Symbology_2eproto();  return *default_instance_;
}

Country* Country::default_instance_ = NULL;

Country* Country::New() const {
  return new Country;
}

void Country::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (_has_bit(1)) {
      if (revision_ != NULL) revision_->::Revision::Clear();
    }
    if (_has_bit(2)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    isonumber_ = 0;
    if (_has_bit(4)) {
      if (iso2code_ != &_default_iso2code_) {
        iso2code_->clear();
      }
    }
    if (_has_bit(5)) {
      if (iso3code_ != &_default_iso3code_) {
        iso3code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Country::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_revision;
        break;
      }
      
      // optional .Revision revision = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_revision:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_revision()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isoNumber;
        break;
      }
      
      // optional int32 isoNumber = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isoNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isonumber_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_iso2Code;
        break;
      }
      
      // optional string iso2Code = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_iso2Code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iso2code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->iso2code().data(), this->iso2code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_iso3Code;
        break;
      }
      
      // optional string iso3Code = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_iso3Code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iso3code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->iso3code().data(), this->iso3code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Country::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional .Revision revision = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->revision(), output);
  }
  
  // optional string name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  // optional int32 isoNumber = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->isonumber(), output);
  }
  
  // optional string iso2Code = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->iso2code().data(), this->iso2code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->iso2code(), output);
  }
  
  // optional string iso3Code = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->iso3code().data(), this->iso3code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->iso3code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Country::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional .Revision revision = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->revision(), target);
  }
  
  // optional string name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  // optional int32 isoNumber = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->isonumber(), target);
  }
  
  // optional string iso2Code = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->iso2code().data(), this->iso2code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->iso2code(), target);
  }
  
  // optional string iso3Code = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->iso3code().data(), this->iso3code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->iso3code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Country::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional .Revision revision = 2;
    if (has_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->revision());
    }
    
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 isoNumber = 4;
    if (has_isonumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isonumber());
    }
    
    // optional string iso2Code = 5;
    if (has_iso2code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->iso2code());
    }
    
    // optional string iso3Code = 6;
    if (has_iso3code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->iso3code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Country::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Country* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Country*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Country::MergeFrom(const Country& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      mutable_revision()->::Revision::MergeFrom(from.revision());
    }
    if (from._has_bit(2)) {
      set_name(from.name());
    }
    if (from._has_bit(3)) {
      set_isonumber(from.isonumber());
    }
    if (from._has_bit(4)) {
      set_iso2code(from.iso2code());
    }
    if (from._has_bit(5)) {
      set_iso3code(from.iso3code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Country::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Country::CopyFrom(const Country& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Country::IsInitialized() const {
  
  return true;
}

void Country::Swap(Country* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(revision_, other->revision_);
    std::swap(name_, other->name_);
    std::swap(isonumber_, other->isonumber_);
    std::swap(iso2code_, other->iso2code_);
    std::swap(iso3code_, other->iso3code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Country::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Country_descriptor_;
  metadata.reflection = Country_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CountrySeries::kCountryFieldNumber;
#endif  // !_MSC_VER

CountrySeries::CountrySeries()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CountrySeries::InitAsDefaultInstance() {
}

CountrySeries::CountrySeries(const CountrySeries& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CountrySeries::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CountrySeries::~CountrySeries() {
  SharedDtor();
}

void CountrySeries::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CountrySeries::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CountrySeries::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CountrySeries_descriptor_;
}

const CountrySeries& CountrySeries::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Symbology_2eproto();  return *default_instance_;
}

CountrySeries* CountrySeries::default_instance_ = NULL;

CountrySeries* CountrySeries::New() const {
  return new CountrySeries;
}

void CountrySeries::Clear() {
  country_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CountrySeries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .symbology.Country country = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_country()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_country;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CountrySeries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .symbology.Country country = 1;
  for (int i = 0; i < this->country_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->country(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CountrySeries::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .symbology.Country country = 1;
  for (int i = 0; i < this->country_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->country(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CountrySeries::ByteSize() const {
  int total_size = 0;
  
  // repeated .symbology.Country country = 1;
  total_size += 1 * this->country_size();
  for (int i = 0; i < this->country_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->country(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CountrySeries::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CountrySeries* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CountrySeries*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CountrySeries::MergeFrom(const CountrySeries& from) {
  GOOGLE_CHECK_NE(&from, this);
  country_.MergeFrom(from.country_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CountrySeries::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountrySeries::CopyFrom(const CountrySeries& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountrySeries::IsInitialized() const {
  
  return true;
}

void CountrySeries::Swap(CountrySeries* other) {
  if (other != this) {
    country_.Swap(&other->country_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CountrySeries::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CountrySeries_descriptor_;
  metadata.reflection = CountrySeries_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Currency::_default_name_;
const ::std::string Currency::_default_isocode_;
#ifndef _MSC_VER
const int Currency::kIdFieldNumber;
const int Currency::kRevisionFieldNumber;
const int Currency::kNameFieldNumber;
const int Currency::kIsoNumberFieldNumber;
const int Currency::kIsoCodeFieldNumber;
#endif  // !_MSC_VER

Currency::Currency()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Currency::InitAsDefaultInstance() {
  revision_ = const_cast< ::Revision*>(&::Revision::default_instance());
}

Currency::Currency(const Currency& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Currency::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  revision_ = NULL;
  name_ = const_cast< ::std::string*>(&_default_name_);
  isonumber_ = 0;
  isocode_ = const_cast< ::std::string*>(&_default_isocode_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Currency::~Currency() {
  SharedDtor();
}

void Currency::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (isocode_ != &_default_isocode_) {
    delete isocode_;
  }
  if (this != default_instance_) {
    delete revision_;
  }
}

void Currency::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Currency::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Currency_descriptor_;
}

const Currency& Currency::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Symbology_2eproto();  return *default_instance_;
}

Currency* Currency::default_instance_ = NULL;

Currency* Currency::New() const {
  return new Currency;
}

void Currency::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (_has_bit(1)) {
      if (revision_ != NULL) revision_->::Revision::Clear();
    }
    if (_has_bit(2)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    isonumber_ = 0;
    if (_has_bit(4)) {
      if (isocode_ != &_default_isocode_) {
        isocode_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Currency::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_revision;
        break;
      }
      
      // optional .Revision revision = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_revision:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_revision()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isoNumber;
        break;
      }
      
      // optional int32 isoNumber = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isoNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isonumber_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_isoCode;
        break;
      }
      
      // optional string isoCode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_isoCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_isocode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->isocode().data(), this->isocode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Currency::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional .Revision revision = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->revision(), output);
  }
  
  // optional string name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  // optional int32 isoNumber = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->isonumber(), output);
  }
  
  // optional string isoCode = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->isocode().data(), this->isocode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->isocode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Currency::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional .Revision revision = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->revision(), target);
  }
  
  // optional string name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  // optional int32 isoNumber = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->isonumber(), target);
  }
  
  // optional string isoCode = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->isocode().data(), this->isocode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->isocode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Currency::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional .Revision revision = 2;
    if (has_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->revision());
    }
    
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 isoNumber = 4;
    if (has_isonumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isonumber());
    }
    
    // optional string isoCode = 5;
    if (has_isocode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->isocode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Currency::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Currency* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Currency*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Currency::MergeFrom(const Currency& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      mutable_revision()->::Revision::MergeFrom(from.revision());
    }
    if (from._has_bit(2)) {
      set_name(from.name());
    }
    if (from._has_bit(3)) {
      set_isonumber(from.isonumber());
    }
    if (from._has_bit(4)) {
      set_isocode(from.isocode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Currency::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Currency::CopyFrom(const Currency& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Currency::IsInitialized() const {
  
  return true;
}

void Currency::Swap(Currency* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(revision_, other->revision_);
    std::swap(name_, other->name_);
    std::swap(isonumber_, other->isonumber_);
    std::swap(isocode_, other->isocode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Currency::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Currency_descriptor_;
  metadata.reflection = Currency_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CurrencySeries::kCurrencyFieldNumber;
#endif  // !_MSC_VER

CurrencySeries::CurrencySeries()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CurrencySeries::InitAsDefaultInstance() {
}

CurrencySeries::CurrencySeries(const CurrencySeries& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CurrencySeries::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CurrencySeries::~CurrencySeries() {
  SharedDtor();
}

void CurrencySeries::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CurrencySeries::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurrencySeries::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurrencySeries_descriptor_;
}

const CurrencySeries& CurrencySeries::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Symbology_2eproto();  return *default_instance_;
}

CurrencySeries* CurrencySeries::default_instance_ = NULL;

CurrencySeries* CurrencySeries::New() const {
  return new CurrencySeries;
}

void CurrencySeries::Clear() {
  currency_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CurrencySeries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .symbology.Currency currency = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_currency()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_currency;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CurrencySeries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .symbology.Currency currency = 1;
  for (int i = 0; i < this->currency_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->currency(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CurrencySeries::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .symbology.Currency currency = 1;
  for (int i = 0; i < this->currency_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->currency(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CurrencySeries::ByteSize() const {
  int total_size = 0;
  
  // repeated .symbology.Currency currency = 1;
  total_size += 1 * this->currency_size();
  for (int i = 0; i < this->currency_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->currency(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurrencySeries::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CurrencySeries* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CurrencySeries*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CurrencySeries::MergeFrom(const CurrencySeries& from) {
  GOOGLE_CHECK_NE(&from, this);
  currency_.MergeFrom(from.currency_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CurrencySeries::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrencySeries::CopyFrom(const CurrencySeries& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrencySeries::IsInitialized() const {
  
  return true;
}

void CurrencySeries::Swap(CurrencySeries* other) {
  if (other != this) {
    currency_.Swap(&other->currency_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CurrencySeries::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CurrencySeries_descriptor_;
  metadata.reflection = CurrencySeries_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Market::_default_name_;
const ::std::string Market::_default_isocode_;
const ::std::string Market::_default_city_;
const ::std::string Market::_default_website_;
#ifndef _MSC_VER
const int Market::kIdFieldNumber;
const int Market::kRevisionFieldNumber;
const int Market::kNameFieldNumber;
const int Market::kIsoCodeFieldNumber;
const int Market::kCountryFieldNumber;
const int Market::kCityFieldNumber;
const int Market::kWebsiteFieldNumber;
#endif  // !_MSC_VER

Market::Market()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Market::InitAsDefaultInstance() {
  revision_ = const_cast< ::Revision*>(&::Revision::default_instance());
  country_ = const_cast< ::symbology::Country*>(&::symbology::Country::default_instance());
}

Market::Market(const Market& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Market::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  revision_ = NULL;
  name_ = const_cast< ::std::string*>(&_default_name_);
  isocode_ = const_cast< ::std::string*>(&_default_isocode_);
  country_ = NULL;
  city_ = const_cast< ::std::string*>(&_default_city_);
  website_ = const_cast< ::std::string*>(&_default_website_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Market::~Market() {
  SharedDtor();
}

void Market::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (isocode_ != &_default_isocode_) {
    delete isocode_;
  }
  if (city_ != &_default_city_) {
    delete city_;
  }
  if (website_ != &_default_website_) {
    delete website_;
  }
  if (this != default_instance_) {
    delete revision_;
    delete country_;
  }
}

void Market::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Market::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Market_descriptor_;
}

const Market& Market::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Symbology_2eproto();  return *default_instance_;
}

Market* Market::default_instance_ = NULL;

Market* Market::New() const {
  return new Market;
}

void Market::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (_has_bit(1)) {
      if (revision_ != NULL) revision_->::Revision::Clear();
    }
    if (_has_bit(2)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(3)) {
      if (isocode_ != &_default_isocode_) {
        isocode_->clear();
      }
    }
    if (_has_bit(4)) {
      if (country_ != NULL) country_->::symbology::Country::Clear();
    }
    if (_has_bit(5)) {
      if (city_ != &_default_city_) {
        city_->clear();
      }
    }
    if (_has_bit(6)) {
      if (website_ != &_default_website_) {
        website_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Market::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_revision;
        break;
      }
      
      // optional .Revision revision = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_revision:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_revision()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_isoCode;
        break;
      }
      
      // optional string isoCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_isoCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_isocode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->isocode().data(), this->isocode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_country;
        break;
      }
      
      // optional .symbology.Country country = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_country()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_city;
        break;
      }
      
      // optional string city = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_website;
        break;
      }
      
      // optional string website = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_website:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_website()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->website().data(), this->website().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Market::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional .Revision revision = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->revision(), output);
  }
  
  // optional string name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  // optional string isoCode = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->isocode().data(), this->isocode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->isocode(), output);
  }
  
  // optional .symbology.Country country = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->country(), output);
  }
  
  // optional string city = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->city(), output);
  }
  
  // optional string website = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->website().data(), this->website().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->website(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Market::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional .Revision revision = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->revision(), target);
  }
  
  // optional string name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  // optional string isoCode = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->isocode().data(), this->isocode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->isocode(), target);
  }
  
  // optional .symbology.Country country = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->country(), target);
  }
  
  // optional string city = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->city(), target);
  }
  
  // optional string website = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->website().data(), this->website().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->website(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Market::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional .Revision revision = 2;
    if (has_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->revision());
    }
    
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string isoCode = 4;
    if (has_isocode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->isocode());
    }
    
    // optional .symbology.Country country = 5;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->country());
    }
    
    // optional string city = 6;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }
    
    // optional string website = 7;
    if (has_website()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->website());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Market::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Market* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Market*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Market::MergeFrom(const Market& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      mutable_revision()->::Revision::MergeFrom(from.revision());
    }
    if (from._has_bit(2)) {
      set_name(from.name());
    }
    if (from._has_bit(3)) {
      set_isocode(from.isocode());
    }
    if (from._has_bit(4)) {
      mutable_country()->::symbology::Country::MergeFrom(from.country());
    }
    if (from._has_bit(5)) {
      set_city(from.city());
    }
    if (from._has_bit(6)) {
      set_website(from.website());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Market::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Market::CopyFrom(const Market& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Market::IsInitialized() const {
  
  return true;
}

void Market::Swap(Market* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(revision_, other->revision_);
    std::swap(name_, other->name_);
    std::swap(isocode_, other->isocode_);
    std::swap(country_, other->country_);
    std::swap(city_, other->city_);
    std::swap(website_, other->website_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Market::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Market_descriptor_;
  metadata.reflection = Market_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketSeries::kMarketFieldNumber;
#endif  // !_MSC_VER

MarketSeries::MarketSeries()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarketSeries::InitAsDefaultInstance() {
}

MarketSeries::MarketSeries(const MarketSeries& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarketSeries::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketSeries::~MarketSeries() {
  SharedDtor();
}

void MarketSeries::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketSeries::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketSeries::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketSeries_descriptor_;
}

const MarketSeries& MarketSeries::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Symbology_2eproto();  return *default_instance_;
}

MarketSeries* MarketSeries::default_instance_ = NULL;

MarketSeries* MarketSeries::New() const {
  return new MarketSeries;
}

void MarketSeries::Clear() {
  market_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketSeries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .symbology.Market market = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_market:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_market()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_market;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarketSeries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .symbology.Market market = 1;
  for (int i = 0; i < this->market_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->market(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarketSeries::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .symbology.Market market = 1;
  for (int i = 0; i < this->market_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->market(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarketSeries::ByteSize() const {
  int total_size = 0;
  
  // repeated .symbology.Market market = 1;
  total_size += 1 * this->market_size();
  for (int i = 0; i < this->market_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->market(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketSeries::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketSeries* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketSeries*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketSeries::MergeFrom(const MarketSeries& from) {
  GOOGLE_CHECK_NE(&from, this);
  market_.MergeFrom(from.market_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketSeries::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketSeries::CopyFrom(const MarketSeries& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketSeries::IsInitialized() const {
  
  return true;
}

void MarketSeries::Swap(MarketSeries* other) {
  if (other != this) {
    market_.Swap(&other->market_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketSeries::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketSeries_descriptor_;
  metadata.reflection = MarketSeries_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Instrument::_default_name_;
#ifndef _MSC_VER
const int Instrument::kIdFieldNumber;
const int Instrument::kRevisionFieldNumber;
const int Instrument::kParentIdFieldNumber;
const int Instrument::kNameFieldNumber;
#endif  // !_MSC_VER

Instrument::Instrument()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Instrument::InitAsDefaultInstance() {
  revision_ = const_cast< ::Revision*>(&::Revision::default_instance());
}

Instrument::Instrument(const Instrument& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Instrument::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  revision_ = NULL;
  parentid_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Instrument::~Instrument() {
  SharedDtor();
}

void Instrument::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
    delete revision_;
  }
}

void Instrument::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Instrument::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Instrument_descriptor_;
}

const Instrument& Instrument::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Symbology_2eproto();  return *default_instance_;
}

Instrument* Instrument::default_instance_ = NULL;

Instrument* Instrument::New() const {
  return new Instrument;
}

void Instrument::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (_has_bit(1)) {
      if (revision_ != NULL) revision_->::Revision::Clear();
    }
    parentid_ = 0;
    if (_has_bit(3)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Instrument::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_revision;
        break;
      }
      
      // optional .Revision revision = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_revision:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_revision()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_parentId;
        break;
      }
      
      // optional int32 parentId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parentId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parentid_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }
      
      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Instrument::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional .Revision revision = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->revision(), output);
  }
  
  // optional int32 parentId = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->parentid(), output);
  }
  
  // optional string name = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Instrument::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional .Revision revision = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->revision(), target);
  }
  
  // optional int32 parentId = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->parentid(), target);
  }
  
  // optional string name = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Instrument::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional .Revision revision = 2;
    if (has_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->revision());
    }
    
    // optional int32 parentId = 3;
    if (has_parentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parentid());
    }
    
    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Instrument::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Instrument* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Instrument*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Instrument::MergeFrom(const Instrument& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      mutable_revision()->::Revision::MergeFrom(from.revision());
    }
    if (from._has_bit(2)) {
      set_parentid(from.parentid());
    }
    if (from._has_bit(3)) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Instrument::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Instrument::CopyFrom(const Instrument& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Instrument::IsInitialized() const {
  
  return true;
}

void Instrument::Swap(Instrument* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(revision_, other->revision_);
    std::swap(parentid_, other->parentid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Instrument::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Instrument_descriptor_;
  metadata.reflection = Instrument_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstrumentSeries::kInstrumentFieldNumber;
#endif  // !_MSC_VER

InstrumentSeries::InstrumentSeries()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstrumentSeries::InitAsDefaultInstance() {
}

InstrumentSeries::InstrumentSeries(const InstrumentSeries& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstrumentSeries::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstrumentSeries::~InstrumentSeries() {
  SharedDtor();
}

void InstrumentSeries::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InstrumentSeries::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstrumentSeries::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstrumentSeries_descriptor_;
}

const InstrumentSeries& InstrumentSeries::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Symbology_2eproto();  return *default_instance_;
}

InstrumentSeries* InstrumentSeries::default_instance_ = NULL;

InstrumentSeries* InstrumentSeries::New() const {
  return new InstrumentSeries;
}

void InstrumentSeries::Clear() {
  instrument_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstrumentSeries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .symbology.Instrument instrument = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instrument:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_instrument()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_instrument;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstrumentSeries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .symbology.Instrument instrument = 1;
  for (int i = 0; i < this->instrument_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->instrument(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstrumentSeries::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .symbology.Instrument instrument = 1;
  for (int i = 0; i < this->instrument_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->instrument(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstrumentSeries::ByteSize() const {
  int total_size = 0;
  
  // repeated .symbology.Instrument instrument = 1;
  total_size += 1 * this->instrument_size();
  for (int i = 0; i < this->instrument_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->instrument(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstrumentSeries::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstrumentSeries* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstrumentSeries*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstrumentSeries::MergeFrom(const InstrumentSeries& from) {
  GOOGLE_CHECK_NE(&from, this);
  instrument_.MergeFrom(from.instrument_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstrumentSeries::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrumentSeries::CopyFrom(const InstrumentSeries& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentSeries::IsInitialized() const {
  
  return true;
}

void InstrumentSeries::Swap(InstrumentSeries* other) {
  if (other != this) {
    instrument_.Swap(&other->instrument_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstrumentSeries::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstrumentSeries_descriptor_;
  metadata.reflection = InstrumentSeries_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CounterParty_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CounterParty_type_descriptor_;
}
bool CounterParty_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CounterParty_type CounterParty::ISO;
const CounterParty_type CounterParty::SYNTHETIC;
const CounterParty_type CounterParty::BROKER;
const CounterParty_type CounterParty::type_MIN;
const CounterParty_type CounterParty::type_MAX;
const int CounterParty::type_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string CounterParty::_default_name_;
const ::std::string CounterParty::_default_isocode_;
const ::std::string CounterParty::_default_website_;
#ifndef _MSC_VER
const int CounterParty::kIdFieldNumber;
const int CounterParty::kRevisionFieldNumber;
const int CounterParty::kNameFieldNumber;
const int CounterParty::kIsoCodeFieldNumber;
const int CounterParty::kWebsiteFieldNumber;
#endif  // !_MSC_VER

CounterParty::CounterParty()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CounterParty::InitAsDefaultInstance() {
  revision_ = const_cast< ::Revision*>(&::Revision::default_instance());
}

CounterParty::CounterParty(const CounterParty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CounterParty::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  revision_ = NULL;
  name_ = const_cast< ::std::string*>(&_default_name_);
  isocode_ = const_cast< ::std::string*>(&_default_isocode_);
  website_ = const_cast< ::std::string*>(&_default_website_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CounterParty::~CounterParty() {
  SharedDtor();
}

void CounterParty::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (isocode_ != &_default_isocode_) {
    delete isocode_;
  }
  if (website_ != &_default_website_) {
    delete website_;
  }
  if (this != default_instance_) {
    delete revision_;
  }
}

void CounterParty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CounterParty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CounterParty_descriptor_;
}

const CounterParty& CounterParty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Symbology_2eproto();  return *default_instance_;
}

CounterParty* CounterParty::default_instance_ = NULL;

CounterParty* CounterParty::New() const {
  return new CounterParty;
}

void CounterParty::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (_has_bit(1)) {
      if (revision_ != NULL) revision_->::Revision::Clear();
    }
    if (_has_bit(2)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(3)) {
      if (isocode_ != &_default_isocode_) {
        isocode_->clear();
      }
    }
    if (_has_bit(4)) {
      if (website_ != &_default_website_) {
        website_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CounterParty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_revision;
        break;
      }
      
      // optional .Revision revision = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_revision:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_revision()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_isoCode;
        break;
      }
      
      // optional string isoCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_isoCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_isocode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->isocode().data(), this->isocode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_website;
        break;
      }
      
      // optional string website = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_website:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_website()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->website().data(), this->website().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CounterParty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional .Revision revision = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->revision(), output);
  }
  
  // optional string name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  // optional string isoCode = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->isocode().data(), this->isocode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->isocode(), output);
  }
  
  // optional string website = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->website().data(), this->website().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->website(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CounterParty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional .Revision revision = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->revision(), target);
  }
  
  // optional string name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  // optional string isoCode = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->isocode().data(), this->isocode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->isocode(), target);
  }
  
  // optional string website = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->website().data(), this->website().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->website(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CounterParty::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional .Revision revision = 2;
    if (has_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->revision());
    }
    
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string isoCode = 4;
    if (has_isocode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->isocode());
    }
    
    // optional string website = 5;
    if (has_website()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->website());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CounterParty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CounterParty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CounterParty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CounterParty::MergeFrom(const CounterParty& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      mutable_revision()->::Revision::MergeFrom(from.revision());
    }
    if (from._has_bit(2)) {
      set_name(from.name());
    }
    if (from._has_bit(3)) {
      set_isocode(from.isocode());
    }
    if (from._has_bit(4)) {
      set_website(from.website());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CounterParty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CounterParty::CopyFrom(const CounterParty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CounterParty::IsInitialized() const {
  
  return true;
}

void CounterParty::Swap(CounterParty* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(revision_, other->revision_);
    std::swap(name_, other->name_);
    std::swap(isocode_, other->isocode_);
    std::swap(website_, other->website_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CounterParty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CounterParty_descriptor_;
  metadata.reflection = CounterParty_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CounterPartySeries::kCounterPartyFieldNumber;
#endif  // !_MSC_VER

CounterPartySeries::CounterPartySeries()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CounterPartySeries::InitAsDefaultInstance() {
}

CounterPartySeries::CounterPartySeries(const CounterPartySeries& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CounterPartySeries::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CounterPartySeries::~CounterPartySeries() {
  SharedDtor();
}

void CounterPartySeries::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CounterPartySeries::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CounterPartySeries::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CounterPartySeries_descriptor_;
}

const CounterPartySeries& CounterPartySeries::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Symbology_2eproto();  return *default_instance_;
}

CounterPartySeries* CounterPartySeries::default_instance_ = NULL;

CounterPartySeries* CounterPartySeries::New() const {
  return new CounterPartySeries;
}

void CounterPartySeries::Clear() {
  counterparty_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CounterPartySeries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .symbology.CounterParty counterParty = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_counterParty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_counterparty()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_counterParty;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CounterPartySeries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .symbology.CounterParty counterParty = 1;
  for (int i = 0; i < this->counterparty_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->counterparty(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CounterPartySeries::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .symbology.CounterParty counterParty = 1;
  for (int i = 0; i < this->counterparty_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->counterparty(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CounterPartySeries::ByteSize() const {
  int total_size = 0;
  
  // repeated .symbology.CounterParty counterParty = 1;
  total_size += 1 * this->counterparty_size();
  for (int i = 0; i < this->counterparty_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->counterparty(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CounterPartySeries::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CounterPartySeries* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CounterPartySeries*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CounterPartySeries::MergeFrom(const CounterPartySeries& from) {
  GOOGLE_CHECK_NE(&from, this);
  counterparty_.MergeFrom(from.counterparty_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CounterPartySeries::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CounterPartySeries::CopyFrom(const CounterPartySeries& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CounterPartySeries::IsInitialized() const {
  
  return true;
}

void CounterPartySeries::Swap(CounterPartySeries* other) {
  if (other != this) {
    counterparty_.Swap(&other->counterparty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CounterPartySeries::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CounterPartySeries_descriptor_;
  metadata.reflection = CounterPartySeries_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Company::_default_name_;
#ifndef _MSC_VER
const int Company::kIdFieldNumber;
const int Company::kRevisionFieldNumber;
const int Company::kNameFieldNumber;
#endif  // !_MSC_VER

Company::Company()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Company::InitAsDefaultInstance() {
  revision_ = const_cast< ::Revision*>(&::Revision::default_instance());
}

Company::Company(const Company& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Company::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  revision_ = NULL;
  name_ = const_cast< ::std::string*>(&_default_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Company::~Company() {
  SharedDtor();
}

void Company::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
    delete revision_;
  }
}

void Company::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Company::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Company_descriptor_;
}

const Company& Company::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Symbology_2eproto();  return *default_instance_;
}

Company* Company::default_instance_ = NULL;

Company* Company::New() const {
  return new Company;
}

void Company::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (_has_bit(1)) {
      if (revision_ != NULL) revision_->::Revision::Clear();
    }
    if (_has_bit(2)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Company::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_revision;
        break;
      }
      
      // optional .Revision revision = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_revision:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_revision()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Company::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional .Revision revision = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->revision(), output);
  }
  
  // optional string name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Company::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional .Revision revision = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->revision(), target);
  }
  
  // optional string name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Company::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional .Revision revision = 2;
    if (has_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->revision());
    }
    
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Company::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Company* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Company*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Company::MergeFrom(const Company& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      mutable_revision()->::Revision::MergeFrom(from.revision());
    }
    if (from._has_bit(2)) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Company::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Company::CopyFrom(const Company& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Company::IsInitialized() const {
  
  return true;
}

void Company::Swap(Company* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(revision_, other->revision_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Company::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Company_descriptor_;
  metadata.reflection = Company_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CompanySeries::kCompanyFieldNumber;
#endif  // !_MSC_VER

CompanySeries::CompanySeries()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CompanySeries::InitAsDefaultInstance() {
}

CompanySeries::CompanySeries(const CompanySeries& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CompanySeries::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompanySeries::~CompanySeries() {
  SharedDtor();
}

void CompanySeries::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CompanySeries::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompanySeries::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompanySeries_descriptor_;
}

const CompanySeries& CompanySeries::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Symbology_2eproto();  return *default_instance_;
}

CompanySeries* CompanySeries::default_instance_ = NULL;

CompanySeries* CompanySeries::New() const {
  return new CompanySeries;
}

void CompanySeries::Clear() {
  company_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CompanySeries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .symbology.Company company = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_company:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_company()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_company;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CompanySeries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .symbology.Company company = 1;
  for (int i = 0; i < this->company_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->company(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CompanySeries::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .symbology.Company company = 1;
  for (int i = 0; i < this->company_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->company(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CompanySeries::ByteSize() const {
  int total_size = 0;
  
  // repeated .symbology.Company company = 1;
  total_size += 1 * this->company_size();
  for (int i = 0; i < this->company_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->company(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompanySeries::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CompanySeries* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CompanySeries*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CompanySeries::MergeFrom(const CompanySeries& from) {
  GOOGLE_CHECK_NE(&from, this);
  company_.MergeFrom(from.company_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CompanySeries::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompanySeries::CopyFrom(const CompanySeries& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompanySeries::IsInitialized() const {
  
  return true;
}

void CompanySeries::Swap(CompanySeries* other) {
  if (other != this) {
    company_.Swap(&other->company_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CompanySeries::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompanySeries_descriptor_;
  metadata.reflection = CompanySeries_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Security::_default_name_;
#ifndef _MSC_VER
const int Security::kIdFieldNumber;
const int Security::kRevisionFieldNumber;
const int Security::kNameFieldNumber;
const int Security::kInstrumentFieldNumber;
const int Security::kCompanyFieldNumber;
const int Security::kCurrencyFieldNumber;
const int Security::kStrikeFieldNumber;
const int Security::kExpirationDateFieldNumber;
#endif  // !_MSC_VER

Security::Security()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Security::InitAsDefaultInstance() {
  revision_ = const_cast< ::Revision*>(&::Revision::default_instance());
  instrument_ = const_cast< ::symbology::Instrument*>(&::symbology::Instrument::default_instance());
  company_ = const_cast< ::symbology::Company*>(&::symbology::Company::default_instance());
  currency_ = const_cast< ::symbology::Currency*>(&::symbology::Currency::default_instance());
}

Security::Security(const Security& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Security::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  revision_ = NULL;
  name_ = const_cast< ::std::string*>(&_default_name_);
  instrument_ = NULL;
  company_ = NULL;
  currency_ = NULL;
  strike_ = 0;
  expirationdate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Security::~Security() {
  SharedDtor();
}

void Security::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
    delete revision_;
    delete instrument_;
    delete company_;
    delete currency_;
  }
}

void Security::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Security::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Security_descriptor_;
}

const Security& Security::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Symbology_2eproto();  return *default_instance_;
}

Security* Security::default_instance_ = NULL;

Security* Security::New() const {
  return new Security;
}

void Security::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (_has_bit(1)) {
      if (revision_ != NULL) revision_->::Revision::Clear();
    }
    if (_has_bit(2)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(3)) {
      if (instrument_ != NULL) instrument_->::symbology::Instrument::Clear();
    }
    if (_has_bit(4)) {
      if (company_ != NULL) company_->::symbology::Company::Clear();
    }
    if (_has_bit(5)) {
      if (currency_ != NULL) currency_->::symbology::Currency::Clear();
    }
    strike_ = 0;
    expirationdate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Security::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_revision;
        break;
      }
      
      // optional .Revision revision = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_revision:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_revision()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_instrument;
        break;
      }
      
      // optional .symbology.Instrument instrument = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instrument:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instrument()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_company;
        break;
      }
      
      // optional .symbology.Company company = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_company:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_company()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_currency;
        break;
      }
      
      // optional .symbology.Currency currency = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_currency()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_strike;
        break;
      }
      
      // optional int32 strike = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strike:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strike_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_expirationDate;
        break;
      }
      
      // optional int32 expirationDate = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expirationDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expirationdate_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Security::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional .Revision revision = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->revision(), output);
  }
  
  // optional string name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  // optional .symbology.Instrument instrument = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->instrument(), output);
  }
  
  // optional .symbology.Company company = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->company(), output);
  }
  
  // optional .symbology.Currency currency = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->currency(), output);
  }
  
  // optional int32 strike = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->strike(), output);
  }
  
  // optional int32 expirationDate = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->expirationdate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Security::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional .Revision revision = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->revision(), target);
  }
  
  // optional string name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  // optional .symbology.Instrument instrument = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->instrument(), target);
  }
  
  // optional .symbology.Company company = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->company(), target);
  }
  
  // optional .symbology.Currency currency = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->currency(), target);
  }
  
  // optional int32 strike = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->strike(), target);
  }
  
  // optional int32 expirationDate = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->expirationdate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Security::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional .Revision revision = 2;
    if (has_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->revision());
    }
    
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional .symbology.Instrument instrument = 4;
    if (has_instrument()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instrument());
    }
    
    // optional .symbology.Company company = 5;
    if (has_company()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->company());
    }
    
    // optional .symbology.Currency currency = 6;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->currency());
    }
    
    // optional int32 strike = 7;
    if (has_strike()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strike());
    }
    
    // optional int32 expirationDate = 8;
    if (has_expirationdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expirationdate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Security::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Security* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Security*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Security::MergeFrom(const Security& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      mutable_revision()->::Revision::MergeFrom(from.revision());
    }
    if (from._has_bit(2)) {
      set_name(from.name());
    }
    if (from._has_bit(3)) {
      mutable_instrument()->::symbology::Instrument::MergeFrom(from.instrument());
    }
    if (from._has_bit(4)) {
      mutable_company()->::symbology::Company::MergeFrom(from.company());
    }
    if (from._has_bit(5)) {
      mutable_currency()->::symbology::Currency::MergeFrom(from.currency());
    }
    if (from._has_bit(6)) {
      set_strike(from.strike());
    }
    if (from._has_bit(7)) {
      set_expirationdate(from.expirationdate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Security::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Security::CopyFrom(const Security& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Security::IsInitialized() const {
  
  return true;
}

void Security::Swap(Security* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(revision_, other->revision_);
    std::swap(name_, other->name_);
    std::swap(instrument_, other->instrument_);
    std::swap(company_, other->company_);
    std::swap(currency_, other->currency_);
    std::swap(strike_, other->strike_);
    std::swap(expirationdate_, other->expirationdate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Security::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Security_descriptor_;
  metadata.reflection = Security_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SecuritySeries::kSecurityFieldNumber;
#endif  // !_MSC_VER

SecuritySeries::SecuritySeries()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SecuritySeries::InitAsDefaultInstance() {
}

SecuritySeries::SecuritySeries(const SecuritySeries& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SecuritySeries::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SecuritySeries::~SecuritySeries() {
  SharedDtor();
}

void SecuritySeries::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SecuritySeries::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SecuritySeries::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecuritySeries_descriptor_;
}

const SecuritySeries& SecuritySeries::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Symbology_2eproto();  return *default_instance_;
}

SecuritySeries* SecuritySeries::default_instance_ = NULL;

SecuritySeries* SecuritySeries::New() const {
  return new SecuritySeries;
}

void SecuritySeries::Clear() {
  security_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SecuritySeries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .symbology.Security security = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_security:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_security()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_security;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SecuritySeries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .symbology.Security security = 1;
  for (int i = 0; i < this->security_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->security(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SecuritySeries::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .symbology.Security security = 1;
  for (int i = 0; i < this->security_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->security(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SecuritySeries::ByteSize() const {
  int total_size = 0;
  
  // repeated .symbology.Security security = 1;
  total_size += 1 * this->security_size();
  for (int i = 0; i < this->security_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->security(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SecuritySeries::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SecuritySeries* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SecuritySeries*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SecuritySeries::MergeFrom(const SecuritySeries& from) {
  GOOGLE_CHECK_NE(&from, this);
  security_.MergeFrom(from.security_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SecuritySeries::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecuritySeries::CopyFrom(const SecuritySeries& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecuritySeries::IsInitialized() const {
  
  return true;
}

void SecuritySeries::Swap(SecuritySeries* other) {
  if (other != this) {
    security_.Swap(&other->security_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SecuritySeries::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SecuritySeries_descriptor_;
  metadata.reflection = SecuritySeries_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Symbol_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Symbol_type_descriptor_;
}
bool Symbol_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Symbol_type Symbol::CUSIP;
const Symbol_type Symbol::ISIN;
const Symbol_type Symbol::SEDOL;
const Symbol_type Symbol::VENDOR;
const Symbol_type Symbol::type_MIN;
const Symbol_type Symbol::type_MAX;
const int Symbol::type_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string Symbol::_default_name_;
#ifndef _MSC_VER
const int Symbol::kIdFieldNumber;
const int Symbol::kRevisionFieldNumber;
const int Symbol::kCurrencyFieldNumber;
const int Symbol::kSecurityFieldNumber;
const int Symbol::kCounterPartyFieldNumber;
const int Symbol::kNameFieldNumber;
#endif  // !_MSC_VER

Symbol::Symbol()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Symbol::InitAsDefaultInstance() {
  revision_ = const_cast< ::Revision*>(&::Revision::default_instance());
  currency_ = const_cast< ::symbology::Currency*>(&::symbology::Currency::default_instance());
  security_ = const_cast< ::symbology::Security*>(&::symbology::Security::default_instance());
  counterparty_ = const_cast< ::symbology::CounterParty*>(&::symbology::CounterParty::default_instance());
}

Symbol::Symbol(const Symbol& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Symbol::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  revision_ = NULL;
  currency_ = NULL;
  security_ = NULL;
  counterparty_ = NULL;
  name_ = const_cast< ::std::string*>(&_default_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Symbol::~Symbol() {
  SharedDtor();
}

void Symbol::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
    delete revision_;
    delete currency_;
    delete security_;
    delete counterparty_;
  }
}

void Symbol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Symbol::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Symbol_descriptor_;
}

const Symbol& Symbol::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Symbology_2eproto();  return *default_instance_;
}

Symbol* Symbol::default_instance_ = NULL;

Symbol* Symbol::New() const {
  return new Symbol;
}

void Symbol::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (_has_bit(1)) {
      if (revision_ != NULL) revision_->::Revision::Clear();
    }
    if (_has_bit(2)) {
      if (currency_ != NULL) currency_->::symbology::Currency::Clear();
    }
    if (_has_bit(3)) {
      if (security_ != NULL) security_->::symbology::Security::Clear();
    }
    if (_has_bit(4)) {
      if (counterparty_ != NULL) counterparty_->::symbology::CounterParty::Clear();
    }
    if (_has_bit(5)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Symbol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_revision;
        break;
      }
      
      // optional .Revision revision = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_revision:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_revision()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_currency;
        break;
      }
      
      // optional .symbology.Currency currency = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_currency()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_security;
        break;
      }
      
      // optional .symbology.Security security = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_security:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_security()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_counterParty;
        break;
      }
      
      // optional .symbology.CounterParty counterParty = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_counterParty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_counterparty()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }
      
      // optional string name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Symbol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional .Revision revision = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->revision(), output);
  }
  
  // optional .symbology.Currency currency = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->currency(), output);
  }
  
  // optional .symbology.Security security = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->security(), output);
  }
  
  // optional .symbology.CounterParty counterParty = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->counterparty(), output);
  }
  
  // optional string name = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Symbol::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional .Revision revision = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->revision(), target);
  }
  
  // optional .symbology.Currency currency = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->currency(), target);
  }
  
  // optional .symbology.Security security = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->security(), target);
  }
  
  // optional .symbology.CounterParty counterParty = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->counterparty(), target);
  }
  
  // optional string name = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Symbol::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional .Revision revision = 2;
    if (has_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->revision());
    }
    
    // optional .symbology.Currency currency = 3;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->currency());
    }
    
    // optional .symbology.Security security = 4;
    if (has_security()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->security());
    }
    
    // optional .symbology.CounterParty counterParty = 5;
    if (has_counterparty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->counterparty());
    }
    
    // optional string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Symbol::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Symbol* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Symbol*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Symbol::MergeFrom(const Symbol& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      mutable_revision()->::Revision::MergeFrom(from.revision());
    }
    if (from._has_bit(2)) {
      mutable_currency()->::symbology::Currency::MergeFrom(from.currency());
    }
    if (from._has_bit(3)) {
      mutable_security()->::symbology::Security::MergeFrom(from.security());
    }
    if (from._has_bit(4)) {
      mutable_counterparty()->::symbology::CounterParty::MergeFrom(from.counterparty());
    }
    if (from._has_bit(5)) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Symbol::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Symbol::CopyFrom(const Symbol& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Symbol::IsInitialized() const {
  
  return true;
}

void Symbol::Swap(Symbol* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(revision_, other->revision_);
    std::swap(currency_, other->currency_);
    std::swap(security_, other->security_);
    std::swap(counterparty_, other->counterparty_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Symbol::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Symbol_descriptor_;
  metadata.reflection = Symbol_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SymbolSeries::kSymbolFieldNumber;
#endif  // !_MSC_VER

SymbolSeries::SymbolSeries()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SymbolSeries::InitAsDefaultInstance() {
}

SymbolSeries::SymbolSeries(const SymbolSeries& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SymbolSeries::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SymbolSeries::~SymbolSeries() {
  SharedDtor();
}

void SymbolSeries::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SymbolSeries::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SymbolSeries::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SymbolSeries_descriptor_;
}

const SymbolSeries& SymbolSeries::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Symbology_2eproto();  return *default_instance_;
}

SymbolSeries* SymbolSeries::default_instance_ = NULL;

SymbolSeries* SymbolSeries::New() const {
  return new SymbolSeries;
}

void SymbolSeries::Clear() {
  symbol_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SymbolSeries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .symbology.Symbol symbol = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_symbol()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_symbol;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SymbolSeries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .symbology.Symbol symbol = 1;
  for (int i = 0; i < this->symbol_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->symbol(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SymbolSeries::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .symbology.Symbol symbol = 1;
  for (int i = 0; i < this->symbol_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->symbol(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SymbolSeries::ByteSize() const {
  int total_size = 0;
  
  // repeated .symbology.Symbol symbol = 1;
  total_size += 1 * this->symbol_size();
  for (int i = 0; i < this->symbol_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->symbol(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SymbolSeries::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SymbolSeries* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SymbolSeries*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SymbolSeries::MergeFrom(const SymbolSeries& from) {
  GOOGLE_CHECK_NE(&from, this);
  symbol_.MergeFrom(from.symbol_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SymbolSeries::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymbolSeries::CopyFrom(const SymbolSeries& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolSeries::IsInitialized() const {
  
  return true;
}

void SymbolSeries::Swap(SymbolSeries* other) {
  if (other != this) {
    symbol_.Swap(&other->symbol_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SymbolSeries::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SymbolSeries_descriptor_;
  metadata.reflection = SymbolSeries_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExchangeRate::kIdFieldNumber;
const int ExchangeRate::kRevisionFieldNumber;
const int ExchangeRate::kToCurrencyFieldNumber;
const int ExchangeRate::kFromCurrencyFieldNumber;
const int ExchangeRate::kCounterPartyFieldNumber;
const int ExchangeRate::kTimeFieldNumber;
const int ExchangeRate::kRateFieldNumber;
#endif  // !_MSC_VER

ExchangeRate::ExchangeRate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExchangeRate::InitAsDefaultInstance() {
  revision_ = const_cast< ::Revision*>(&::Revision::default_instance());
  tocurrency_ = const_cast< ::symbology::Currency*>(&::symbology::Currency::default_instance());
  fromcurrency_ = const_cast< ::symbology::Currency*>(&::symbology::Currency::default_instance());
  counterparty_ = const_cast< ::symbology::CounterParty*>(&::symbology::CounterParty::default_instance());
}

ExchangeRate::ExchangeRate(const ExchangeRate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExchangeRate::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  revision_ = NULL;
  tocurrency_ = NULL;
  fromcurrency_ = NULL;
  counterparty_ = NULL;
  time_ = GOOGLE_LONGLONG(0);
  rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExchangeRate::~ExchangeRate() {
  SharedDtor();
}

void ExchangeRate::SharedDtor() {
  if (this != default_instance_) {
    delete revision_;
    delete tocurrency_;
    delete fromcurrency_;
    delete counterparty_;
  }
}

void ExchangeRate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExchangeRate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExchangeRate_descriptor_;
}

const ExchangeRate& ExchangeRate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Symbology_2eproto();  return *default_instance_;
}

ExchangeRate* ExchangeRate::default_instance_ = NULL;

ExchangeRate* ExchangeRate::New() const {
  return new ExchangeRate;
}

void ExchangeRate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (_has_bit(1)) {
      if (revision_ != NULL) revision_->::Revision::Clear();
    }
    if (_has_bit(2)) {
      if (tocurrency_ != NULL) tocurrency_->::symbology::Currency::Clear();
    }
    if (_has_bit(3)) {
      if (fromcurrency_ != NULL) fromcurrency_->::symbology::Currency::Clear();
    }
    if (_has_bit(4)) {
      if (counterparty_ != NULL) counterparty_->::symbology::CounterParty::Clear();
    }
    time_ = GOOGLE_LONGLONG(0);
    rate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExchangeRate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_revision;
        break;
      }
      
      // optional .Revision revision = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_revision:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_revision()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_toCurrency;
        break;
      }
      
      // optional .symbology.Currency toCurrency = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_toCurrency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tocurrency()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fromCurrency;
        break;
      }
      
      // optional .symbology.Currency fromCurrency = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fromCurrency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fromcurrency()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_counterParty;
        break;
      }
      
      // optional .symbology.CounterParty counterParty = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_counterParty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_counterparty()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }
      
      // optional int64 time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_rate;
        break;
      }
      
      // optional int32 rate = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rate_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExchangeRate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional .Revision revision = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->revision(), output);
  }
  
  // optional .symbology.Currency toCurrency = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tocurrency(), output);
  }
  
  // optional .symbology.Currency fromCurrency = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->fromcurrency(), output);
  }
  
  // optional .symbology.CounterParty counterParty = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->counterparty(), output);
  }
  
  // optional int64 time = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->time(), output);
  }
  
  // optional int32 rate = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->rate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExchangeRate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional .Revision revision = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->revision(), target);
  }
  
  // optional .symbology.Currency toCurrency = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tocurrency(), target);
  }
  
  // optional .symbology.Currency fromCurrency = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->fromcurrency(), target);
  }
  
  // optional .symbology.CounterParty counterParty = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->counterparty(), target);
  }
  
  // optional int64 time = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->time(), target);
  }
  
  // optional int32 rate = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->rate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExchangeRate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional .Revision revision = 2;
    if (has_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->revision());
    }
    
    // optional .symbology.Currency toCurrency = 3;
    if (has_tocurrency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tocurrency());
    }
    
    // optional .symbology.Currency fromCurrency = 4;
    if (has_fromcurrency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fromcurrency());
    }
    
    // optional .symbology.CounterParty counterParty = 5;
    if (has_counterparty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->counterparty());
    }
    
    // optional int64 time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }
    
    // optional int32 rate = 7;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExchangeRate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExchangeRate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExchangeRate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExchangeRate::MergeFrom(const ExchangeRate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      mutable_revision()->::Revision::MergeFrom(from.revision());
    }
    if (from._has_bit(2)) {
      mutable_tocurrency()->::symbology::Currency::MergeFrom(from.tocurrency());
    }
    if (from._has_bit(3)) {
      mutable_fromcurrency()->::symbology::Currency::MergeFrom(from.fromcurrency());
    }
    if (from._has_bit(4)) {
      mutable_counterparty()->::symbology::CounterParty::MergeFrom(from.counterparty());
    }
    if (from._has_bit(5)) {
      set_time(from.time());
    }
    if (from._has_bit(6)) {
      set_rate(from.rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExchangeRate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeRate::CopyFrom(const ExchangeRate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeRate::IsInitialized() const {
  
  return true;
}

void ExchangeRate::Swap(ExchangeRate* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(revision_, other->revision_);
    std::swap(tocurrency_, other->tocurrency_);
    std::swap(fromcurrency_, other->fromcurrency_);
    std::swap(counterparty_, other->counterparty_);
    std::swap(time_, other->time_);
    std::swap(rate_, other->rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExchangeRate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExchangeRate_descriptor_;
  metadata.reflection = ExchangeRate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExchangeRateSeries::kExchangeRateFieldNumber;
#endif  // !_MSC_VER

ExchangeRateSeries::ExchangeRateSeries()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExchangeRateSeries::InitAsDefaultInstance() {
}

ExchangeRateSeries::ExchangeRateSeries(const ExchangeRateSeries& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExchangeRateSeries::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExchangeRateSeries::~ExchangeRateSeries() {
  SharedDtor();
}

void ExchangeRateSeries::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExchangeRateSeries::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExchangeRateSeries::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExchangeRateSeries_descriptor_;
}

const ExchangeRateSeries& ExchangeRateSeries::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Symbology_2eproto();  return *default_instance_;
}

ExchangeRateSeries* ExchangeRateSeries::default_instance_ = NULL;

ExchangeRateSeries* ExchangeRateSeries::New() const {
  return new ExchangeRateSeries;
}

void ExchangeRateSeries::Clear() {
  exchangerate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExchangeRateSeries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .symbology.ExchangeRate exchangeRate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exchangeRate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_exchangerate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_exchangeRate;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExchangeRateSeries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .symbology.ExchangeRate exchangeRate = 1;
  for (int i = 0; i < this->exchangerate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->exchangerate(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExchangeRateSeries::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .symbology.ExchangeRate exchangeRate = 1;
  for (int i = 0; i < this->exchangerate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->exchangerate(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExchangeRateSeries::ByteSize() const {
  int total_size = 0;
  
  // repeated .symbology.ExchangeRate exchangeRate = 1;
  total_size += 1 * this->exchangerate_size();
  for (int i = 0; i < this->exchangerate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exchangerate(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExchangeRateSeries::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExchangeRateSeries* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExchangeRateSeries*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExchangeRateSeries::MergeFrom(const ExchangeRateSeries& from) {
  GOOGLE_CHECK_NE(&from, this);
  exchangerate_.MergeFrom(from.exchangerate_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExchangeRateSeries::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeRateSeries::CopyFrom(const ExchangeRateSeries& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeRateSeries::IsInitialized() const {
  
  return true;
}

void ExchangeRateSeries::Swap(ExchangeRateSeries* other) {
  if (other != this) {
    exchangerate_.Swap(&other->exchangerate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExchangeRateSeries::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExchangeRateSeries_descriptor_;
  metadata.reflection = ExchangeRateSeries_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Price::kIdFieldNumber;
const int Price::kRevisionFieldNumber;
const int Price::kSecurityFieldNumber;
const int Price::kCounterPartyFieldNumber;
const int Price::kCurrencyFieldNumber;
const int Price::kDateFieldNumber;
const int Price::kBidFieldNumber;
const int Price::kAskFieldNumber;
const int Price::kOpenFieldNumber;
const int Price::kCloseFieldNumber;
const int Price::kHighFieldNumber;
const int Price::kLowFieldNumber;
const int Price::kVolumeFieldNumber;
const int Price::kReturnFieldNumber;
#endif  // !_MSC_VER

Price::Price()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Price::InitAsDefaultInstance() {
  revision_ = const_cast< ::Revision*>(&::Revision::default_instance());
  security_ = const_cast< ::symbology::Security*>(&::symbology::Security::default_instance());
  counterparty_ = const_cast< ::symbology::CounterParty*>(&::symbology::CounterParty::default_instance());
  currency_ = const_cast< ::symbology::Currency*>(&::symbology::Currency::default_instance());
}

Price::Price(const Price& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Price::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  revision_ = NULL;
  security_ = NULL;
  counterparty_ = NULL;
  currency_ = NULL;
  date_ = 0;
  bid_ = 0;
  ask_ = 0;
  open_ = 0;
  close_ = 0;
  high_ = 0;
  low_ = 0;
  volume_ = 0;
  return__ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Price::~Price() {
  SharedDtor();
}

void Price::SharedDtor() {
  if (this != default_instance_) {
    delete revision_;
    delete security_;
    delete counterparty_;
    delete currency_;
  }
}

void Price::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Price::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Price_descriptor_;
}

const Price& Price::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Symbology_2eproto();  return *default_instance_;
}

Price* Price::default_instance_ = NULL;

Price* Price::New() const {
  return new Price;
}

void Price::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (_has_bit(1)) {
      if (revision_ != NULL) revision_->::Revision::Clear();
    }
    if (_has_bit(2)) {
      if (security_ != NULL) security_->::symbology::Security::Clear();
    }
    if (_has_bit(3)) {
      if (counterparty_ != NULL) counterparty_->::symbology::CounterParty::Clear();
    }
    if (_has_bit(4)) {
      if (currency_ != NULL) currency_->::symbology::Currency::Clear();
    }
    date_ = 0;
    bid_ = 0;
    ask_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    open_ = 0;
    close_ = 0;
    high_ = 0;
    low_ = 0;
    volume_ = 0;
    return__ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Price::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_revision;
        break;
      }
      
      // optional .Revision revision = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_revision:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_revision()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_security;
        break;
      }
      
      // optional .symbology.Security security = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_security:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_security()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_counterParty;
        break;
      }
      
      // optional .symbology.CounterParty counterParty = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_counterParty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_counterparty()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_currency;
        break;
      }
      
      // optional .symbology.Currency currency = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_currency()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_date;
        break;
      }
      
      // optional int32 date = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &date_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bid;
        break;
      }
      
      // optional int32 bid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ask;
        break;
      }
      
      // optional int32 ask = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ask_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_open;
        break;
      }
      
      // optional int32 open = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_close;
        break;
      }
      
      // optional int32 close = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_close:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &close_)));
          _set_bit(9);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_high;
        break;
      }
      
      // optional int32 high = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_high:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &high_)));
          _set_bit(10);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_low;
        break;
      }
      
      // optional int32 low = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &low_)));
          _set_bit(11);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_volume;
        break;
      }
      
      // optional int32 volume = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
          _set_bit(12);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_return;
        break;
      }
      
      // optional int32 return = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_return:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &return__)));
          _set_bit(13);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Price::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional .Revision revision = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->revision(), output);
  }
  
  // optional .symbology.Security security = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->security(), output);
  }
  
  // optional .symbology.CounterParty counterParty = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->counterparty(), output);
  }
  
  // optional .symbology.Currency currency = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->currency(), output);
  }
  
  // optional int32 date = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->date(), output);
  }
  
  // optional int32 bid = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->bid(), output);
  }
  
  // optional int32 ask = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->ask(), output);
  }
  
  // optional int32 open = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->open(), output);
  }
  
  // optional int32 close = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->close(), output);
  }
  
  // optional int32 high = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->high(), output);
  }
  
  // optional int32 low = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->low(), output);
  }
  
  // optional int32 volume = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->volume(), output);
  }
  
  // optional int32 return = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->return_(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Price::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional .Revision revision = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->revision(), target);
  }
  
  // optional .symbology.Security security = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->security(), target);
  }
  
  // optional .symbology.CounterParty counterParty = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->counterparty(), target);
  }
  
  // optional .symbology.Currency currency = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->currency(), target);
  }
  
  // optional int32 date = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->date(), target);
  }
  
  // optional int32 bid = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->bid(), target);
  }
  
  // optional int32 ask = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->ask(), target);
  }
  
  // optional int32 open = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->open(), target);
  }
  
  // optional int32 close = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->close(), target);
  }
  
  // optional int32 high = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->high(), target);
  }
  
  // optional int32 low = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->low(), target);
  }
  
  // optional int32 volume = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->volume(), target);
  }
  
  // optional int32 return = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->return_(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Price::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional .Revision revision = 2;
    if (has_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->revision());
    }
    
    // optional .symbology.Security security = 3;
    if (has_security()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->security());
    }
    
    // optional .symbology.CounterParty counterParty = 4;
    if (has_counterparty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->counterparty());
    }
    
    // optional .symbology.Currency currency = 5;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->currency());
    }
    
    // optional int32 date = 6;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->date());
    }
    
    // optional int32 bid = 7;
    if (has_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bid());
    }
    
    // optional int32 ask = 8;
    if (has_ask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ask());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 open = 9;
    if (has_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open());
    }
    
    // optional int32 close = 10;
    if (has_close()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->close());
    }
    
    // optional int32 high = 11;
    if (has_high()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->high());
    }
    
    // optional int32 low = 12;
    if (has_low()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->low());
    }
    
    // optional int32 volume = 13;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volume());
    }
    
    // optional int32 return = 14;
    if (has_return_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->return_());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Price::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Price* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Price*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Price::MergeFrom(const Price& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      mutable_revision()->::Revision::MergeFrom(from.revision());
    }
    if (from._has_bit(2)) {
      mutable_security()->::symbology::Security::MergeFrom(from.security());
    }
    if (from._has_bit(3)) {
      mutable_counterparty()->::symbology::CounterParty::MergeFrom(from.counterparty());
    }
    if (from._has_bit(4)) {
      mutable_currency()->::symbology::Currency::MergeFrom(from.currency());
    }
    if (from._has_bit(5)) {
      set_date(from.date());
    }
    if (from._has_bit(6)) {
      set_bid(from.bid());
    }
    if (from._has_bit(7)) {
      set_ask(from.ask());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_open(from.open());
    }
    if (from._has_bit(9)) {
      set_close(from.close());
    }
    if (from._has_bit(10)) {
      set_high(from.high());
    }
    if (from._has_bit(11)) {
      set_low(from.low());
    }
    if (from._has_bit(12)) {
      set_volume(from.volume());
    }
    if (from._has_bit(13)) {
      set_return_(from.return_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Price::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Price::CopyFrom(const Price& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Price::IsInitialized() const {
  
  return true;
}

void Price::Swap(Price* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(revision_, other->revision_);
    std::swap(security_, other->security_);
    std::swap(counterparty_, other->counterparty_);
    std::swap(currency_, other->currency_);
    std::swap(date_, other->date_);
    std::swap(bid_, other->bid_);
    std::swap(ask_, other->ask_);
    std::swap(open_, other->open_);
    std::swap(close_, other->close_);
    std::swap(high_, other->high_);
    std::swap(low_, other->low_);
    std::swap(volume_, other->volume_);
    std::swap(return__, other->return__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Price::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Price_descriptor_;
  metadata.reflection = Price_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PriceSeries::kPriceFieldNumber;
#endif  // !_MSC_VER

PriceSeries::PriceSeries()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PriceSeries::InitAsDefaultInstance() {
}

PriceSeries::PriceSeries(const PriceSeries& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PriceSeries::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PriceSeries::~PriceSeries() {
  SharedDtor();
}

void PriceSeries::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PriceSeries::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PriceSeries::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PriceSeries_descriptor_;
}

const PriceSeries& PriceSeries::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Symbology_2eproto();  return *default_instance_;
}

PriceSeries* PriceSeries::default_instance_ = NULL;

PriceSeries* PriceSeries::New() const {
  return new PriceSeries;
}

void PriceSeries::Clear() {
  price_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PriceSeries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .symbology.Price price = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_price()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_price;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PriceSeries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .symbology.Price price = 1;
  for (int i = 0; i < this->price_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->price(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PriceSeries::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .symbology.Price price = 1;
  for (int i = 0; i < this->price_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->price(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PriceSeries::ByteSize() const {
  int total_size = 0;
  
  // repeated .symbology.Price price = 1;
  total_size += 1 * this->price_size();
  for (int i = 0; i < this->price_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->price(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PriceSeries::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PriceSeries* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PriceSeries*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PriceSeries::MergeFrom(const PriceSeries& from) {
  GOOGLE_CHECK_NE(&from, this);
  price_.MergeFrom(from.price_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PriceSeries::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PriceSeries::CopyFrom(const PriceSeries& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriceSeries::IsInitialized() const {
  
  return true;
}

void PriceSeries::Swap(PriceSeries* other) {
  if (other != this) {
    price_.Swap(&other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PriceSeries::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PriceSeries_descriptor_;
  metadata.reflection = PriceSeries_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Event::kIdFieldNumber;
const int Event::kRevisionFieldNumber;
#endif  // !_MSC_VER

Event::Event()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Event::InitAsDefaultInstance() {
  revision_ = const_cast< ::Revision*>(&::Revision::default_instance());
}

Event::Event(const Event& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Event::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  revision_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Event::~Event() {
  SharedDtor();
}

void Event::SharedDtor() {
  if (this != default_instance_) {
    delete revision_;
  }
}

void Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_descriptor_;
}

const Event& Event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Symbology_2eproto();  return *default_instance_;
}

Event* Event::default_instance_ = NULL;

Event* Event::New() const {
  return new Event;
}

void Event::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (_has_bit(1)) {
      if (revision_ != NULL) revision_->::Revision::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_revision;
        break;
      }
      
      // optional .Revision revision = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_revision:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_revision()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional .Revision revision = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->revision(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Event::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional .Revision revision = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->revision(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Event::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional .Revision revision = 2;
    if (has_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->revision());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Event* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Event*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      mutable_revision()->::Revision::MergeFrom(from.revision());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Event::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  
  return true;
}

void Event::Swap(Event* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(revision_, other->revision_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Event_descriptor_;
  metadata.reflection = Event_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventSeries::kEventFieldNumber;
#endif  // !_MSC_VER

EventSeries::EventSeries()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventSeries::InitAsDefaultInstance() {
}

EventSeries::EventSeries(const EventSeries& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventSeries::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventSeries::~EventSeries() {
  SharedDtor();
}

void EventSeries::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EventSeries::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventSeries::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventSeries_descriptor_;
}

const EventSeries& EventSeries::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Symbology_2eproto();  return *default_instance_;
}

EventSeries* EventSeries::default_instance_ = NULL;

EventSeries* EventSeries::New() const {
  return new EventSeries;
}

void EventSeries::Clear() {
  event_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventSeries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .symbology.Event event = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_event;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventSeries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .symbology.Event event = 1;
  for (int i = 0; i < this->event_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->event(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventSeries::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .symbology.Event event = 1;
  for (int i = 0; i < this->event_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->event(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventSeries::ByteSize() const {
  int total_size = 0;
  
  // repeated .symbology.Event event = 1;
  total_size += 1 * this->event_size();
  for (int i = 0; i < this->event_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->event(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventSeries::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventSeries* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventSeries*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventSeries::MergeFrom(const EventSeries& from) {
  GOOGLE_CHECK_NE(&from, this);
  event_.MergeFrom(from.event_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventSeries::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventSeries::CopyFrom(const EventSeries& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventSeries::IsInitialized() const {
  
  return true;
}

void EventSeries::Swap(EventSeries* other) {
  if (other != this) {
    event_.Swap(&other->event_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventSeries::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventSeries_descriptor_;
  metadata.reflection = EventSeries_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace symbology

// @@protoc_insertion_point(global_scope)
