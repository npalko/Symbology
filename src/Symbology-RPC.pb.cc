// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Symbology-RPC.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace symbology {

namespace {

const ::google::protobuf::Descriptor* SubscriptionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscriptionRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SubscriptionRequest_Series_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SeriesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeriesRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SeriesRequest_Series_descriptor_ = NULL;
const ::google::protobuf::Descriptor* EntityRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EntityRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EntityRequest_Entity_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Symbology_2dRPC_2eproto() {
  protobuf_AddDesc_Symbology_2dRPC_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Symbology-RPC.proto");
  GOOGLE_CHECK(file != NULL);
  SubscriptionRequest_descriptor_ = file->message_type(0);
  static const int SubscriptionRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionRequest, security_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionRequest, counterparty_),
  };
  SubscriptionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscriptionRequest_descriptor_,
      SubscriptionRequest::default_instance_,
      SubscriptionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscriptionRequest));
  SubscriptionRequest_Series_descriptor_ = SubscriptionRequest_descriptor_->enum_type(0);
  SeriesRequest_descriptor_ = file->message_type(1);
  static const int SeriesRequest_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesRequest, startdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesRequest, enddate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesRequest, asofdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesRequest, security_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesRequest, counteryparty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesRequest, eventadjusted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesRequest, getrevision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesRequest, getsecurityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesRequest, getdate_),
  };
  SeriesRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SeriesRequest_descriptor_,
      SeriesRequest::default_instance_,
      SeriesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SeriesRequest));
  SeriesRequest_Series_descriptor_ = SeriesRequest_descriptor_->enum_type(0);
  EntityRequest_descriptor_ = file->message_type(2);
  static const int EntityRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityRequest, payload_),
  };
  EntityRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EntityRequest_descriptor_,
      EntityRequest::default_instance_,
      EntityRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EntityRequest));
  EntityRequest_Entity_descriptor_ = EntityRequest_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Symbology_2dRPC_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscriptionRequest_descriptor_, &SubscriptionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SeriesRequest_descriptor_, &SeriesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EntityRequest_descriptor_, &EntityRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Symbology_2dRPC_2eproto() {
  delete SubscriptionRequest::default_instance_;
  delete SubscriptionRequest_reflection_;
  delete SeriesRequest::default_instance_;
  delete SeriesRequest_reflection_;
  delete EntityRequest::default_instance_;
  delete EntityRequest_reflection_;
}

void protobuf_AddDesc_Symbology_2dRPC_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::symbology::protobuf_AddDesc_Symbology_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023Symbology-RPC.proto\022\tsymbology\032\017Symbol"
    "ogy.proto\"\200\001\n\023SubscriptionRequest\022%\n\010sec"
    "urity\030\001 \003(\0132\023.symbology.Security\022-\n\014coun"
    "terParty\030\002 \003(\0132\027.symbology.CounterParty\""
    "\023\n\006Series\022\t\n\005PRICE\020\000\"\377\002\n\rSeriesRequest\022\021"
    "\n\tstartDate\030\001 \001(\005\022\017\n\007endDate\030\002 \001(\005\022\020\n\010as"
    "OfDate\030\003 \001(\005\022%\n\010security\030\004 \003(\0132\023.symbolo"
    "gy.Security\022.\n\rcounteryParty\030\005 \003(\0132\027.sym"
    "bology.CounterParty\022\025\n\reventAdjusted\030\006 \001"
    "(\010\022\023\n\013getRevision\030\007 \001(\010\022\025\n\rgetSecurityId"
    "\030\010 \001(\010\022\017\n\007getDate\030\t \001(\010\"\214\001\n\006Series\022\016\n\nOP"
    "EN_PRICE\020\000\022\017\n\013CLOSE_PRICE\020\001\022\016\n\nHIGH_PRIC"
    "E\020\002\022\r\n\tLOW_PRICE\020\003\022\n\n\006VOLUME\020\004\022\021\n\rOPEN_I"
    "NTEREST\020\005\022\n\n\006RETURN\020\006\022\014\n\010DIVIDEND\020\007\022\t\n\005S"
    "PLIT\020\010\"\247\001\n\rEntityRequest\022\n\n\002id\030\001 \003(\005\022\017\n\007"
    "payload\030\002 \001(\014\"y\n\006Entity\022\014\n\010CURRENCY\020\000\022\013\n"
    "\007COUNTRY\020\001\022\n\n\006MARKET\020\002\022\016\n\nINSTRUMENT\020\003\022\021"
    "\n\rCOUNTER_PARTY\020\004\022\013\n\007COMPANY\020\005\022\014\n\010SECURI"
    "TY\020\006\022\n\n\006SYMBOL\020\007", 736);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Symbology-RPC.proto", &protobuf_RegisterTypes);
  SubscriptionRequest::default_instance_ = new SubscriptionRequest();
  SeriesRequest::default_instance_ = new SeriesRequest();
  EntityRequest::default_instance_ = new EntityRequest();
  SubscriptionRequest::default_instance_->InitAsDefaultInstance();
  SeriesRequest::default_instance_->InitAsDefaultInstance();
  EntityRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Symbology_2dRPC_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Symbology_2dRPC_2eproto {
  StaticDescriptorInitializer_Symbology_2dRPC_2eproto() {
    protobuf_AddDesc_Symbology_2dRPC_2eproto();
  }
} static_descriptor_initializer_Symbology_2dRPC_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* SubscriptionRequest_Series_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscriptionRequest_Series_descriptor_;
}
bool SubscriptionRequest_Series_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SubscriptionRequest_Series SubscriptionRequest::PRICE;
const SubscriptionRequest_Series SubscriptionRequest::Series_MIN;
const SubscriptionRequest_Series SubscriptionRequest::Series_MAX;
const int SubscriptionRequest::Series_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SubscriptionRequest::kSecurityFieldNumber;
const int SubscriptionRequest::kCounterPartyFieldNumber;
#endif  // !_MSC_VER

SubscriptionRequest::SubscriptionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubscriptionRequest::InitAsDefaultInstance() {
}

SubscriptionRequest::SubscriptionRequest(const SubscriptionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubscriptionRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscriptionRequest::~SubscriptionRequest() {
  SharedDtor();
}

void SubscriptionRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubscriptionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscriptionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscriptionRequest_descriptor_;
}

const SubscriptionRequest& SubscriptionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Symbology_2dRPC_2eproto();  return *default_instance_;
}

SubscriptionRequest* SubscriptionRequest::default_instance_ = NULL;

SubscriptionRequest* SubscriptionRequest::New() const {
  return new SubscriptionRequest;
}

void SubscriptionRequest::Clear() {
  security_.Clear();
  counterparty_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscriptionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .symbology.Security security = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_security:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_security()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_security;
        if (input->ExpectTag(18)) goto parse_counterParty;
        break;
      }
      
      // repeated .symbology.CounterParty counterParty = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_counterParty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_counterparty()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_counterParty;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubscriptionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .symbology.Security security = 1;
  for (int i = 0; i < this->security_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->security(i), output);
  }
  
  // repeated .symbology.CounterParty counterParty = 2;
  for (int i = 0; i < this->counterparty_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->counterparty(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubscriptionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .symbology.Security security = 1;
  for (int i = 0; i < this->security_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->security(i), target);
  }
  
  // repeated .symbology.CounterParty counterParty = 2;
  for (int i = 0; i < this->counterparty_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->counterparty(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubscriptionRequest::ByteSize() const {
  int total_size = 0;
  
  // repeated .symbology.Security security = 1;
  total_size += 1 * this->security_size();
  for (int i = 0; i < this->security_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->security(i));
  }
  
  // repeated .symbology.CounterParty counterParty = 2;
  total_size += 1 * this->counterparty_size();
  for (int i = 0; i < this->counterparty_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->counterparty(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscriptionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscriptionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscriptionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscriptionRequest::MergeFrom(const SubscriptionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  security_.MergeFrom(from.security_);
  counterparty_.MergeFrom(from.counterparty_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscriptionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscriptionRequest::CopyFrom(const SubscriptionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionRequest::IsInitialized() const {
  
  return true;
}

void SubscriptionRequest::Swap(SubscriptionRequest* other) {
  if (other != this) {
    security_.Swap(&other->security_);
    counterparty_.Swap(&other->counterparty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscriptionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscriptionRequest_descriptor_;
  metadata.reflection = SubscriptionRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SeriesRequest_Series_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeriesRequest_Series_descriptor_;
}
bool SeriesRequest_Series_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SeriesRequest_Series SeriesRequest::OPEN_PRICE;
const SeriesRequest_Series SeriesRequest::CLOSE_PRICE;
const SeriesRequest_Series SeriesRequest::HIGH_PRICE;
const SeriesRequest_Series SeriesRequest::LOW_PRICE;
const SeriesRequest_Series SeriesRequest::VOLUME;
const SeriesRequest_Series SeriesRequest::OPEN_INTEREST;
const SeriesRequest_Series SeriesRequest::RETURN;
const SeriesRequest_Series SeriesRequest::DIVIDEND;
const SeriesRequest_Series SeriesRequest::SPLIT;
const SeriesRequest_Series SeriesRequest::Series_MIN;
const SeriesRequest_Series SeriesRequest::Series_MAX;
const int SeriesRequest::Series_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SeriesRequest::kStartDateFieldNumber;
const int SeriesRequest::kEndDateFieldNumber;
const int SeriesRequest::kAsOfDateFieldNumber;
const int SeriesRequest::kSecurityFieldNumber;
const int SeriesRequest::kCounteryPartyFieldNumber;
const int SeriesRequest::kEventAdjustedFieldNumber;
const int SeriesRequest::kGetRevisionFieldNumber;
const int SeriesRequest::kGetSecurityIdFieldNumber;
const int SeriesRequest::kGetDateFieldNumber;
#endif  // !_MSC_VER

SeriesRequest::SeriesRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SeriesRequest::InitAsDefaultInstance() {
}

SeriesRequest::SeriesRequest(const SeriesRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SeriesRequest::SharedCtor() {
  _cached_size_ = 0;
  startdate_ = 0;
  enddate_ = 0;
  asofdate_ = 0;
  eventadjusted_ = false;
  getrevision_ = false;
  getsecurityid_ = false;
  getdate_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeriesRequest::~SeriesRequest() {
  SharedDtor();
}

void SeriesRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SeriesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeriesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeriesRequest_descriptor_;
}

const SeriesRequest& SeriesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Symbology_2dRPC_2eproto();  return *default_instance_;
}

SeriesRequest* SeriesRequest::default_instance_ = NULL;

SeriesRequest* SeriesRequest::New() const {
  return new SeriesRequest;
}

void SeriesRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    startdate_ = 0;
    enddate_ = 0;
    asofdate_ = 0;
    eventadjusted_ = false;
    getrevision_ = false;
    getsecurityid_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    getdate_ = false;
  }
  security_.Clear();
  counteryparty_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SeriesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 startDate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startdate_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_endDate;
        break;
      }
      
      // optional int32 endDate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enddate_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_asOfDate;
        break;
      }
      
      // optional int32 asOfDate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_asOfDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &asofdate_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_security;
        break;
      }
      
      // repeated .symbology.Security security = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_security:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_security()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_security;
        if (input->ExpectTag(42)) goto parse_counteryParty;
        break;
      }
      
      // repeated .symbology.CounterParty counteryParty = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_counteryParty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_counteryparty()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_counteryParty;
        if (input->ExpectTag(48)) goto parse_eventAdjusted;
        break;
      }
      
      // optional bool eventAdjusted = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eventAdjusted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &eventadjusted_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_getRevision;
        break;
      }
      
      // optional bool getRevision = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getRevision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &getrevision_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_getSecurityId;
        break;
      }
      
      // optional bool getSecurityId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getSecurityId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &getsecurityid_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_getDate;
        break;
      }
      
      // optional bool getDate = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &getdate_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SeriesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 startDate = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->startdate(), output);
  }
  
  // optional int32 endDate = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->enddate(), output);
  }
  
  // optional int32 asOfDate = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->asofdate(), output);
  }
  
  // repeated .symbology.Security security = 4;
  for (int i = 0; i < this->security_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->security(i), output);
  }
  
  // repeated .symbology.CounterParty counteryParty = 5;
  for (int i = 0; i < this->counteryparty_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->counteryparty(i), output);
  }
  
  // optional bool eventAdjusted = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->eventadjusted(), output);
  }
  
  // optional bool getRevision = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->getrevision(), output);
  }
  
  // optional bool getSecurityId = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->getsecurityid(), output);
  }
  
  // optional bool getDate = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->getdate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SeriesRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 startDate = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->startdate(), target);
  }
  
  // optional int32 endDate = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->enddate(), target);
  }
  
  // optional int32 asOfDate = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->asofdate(), target);
  }
  
  // repeated .symbology.Security security = 4;
  for (int i = 0; i < this->security_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->security(i), target);
  }
  
  // repeated .symbology.CounterParty counteryParty = 5;
  for (int i = 0; i < this->counteryparty_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->counteryparty(i), target);
  }
  
  // optional bool eventAdjusted = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->eventadjusted(), target);
  }
  
  // optional bool getRevision = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->getrevision(), target);
  }
  
  // optional bool getSecurityId = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->getsecurityid(), target);
  }
  
  // optional bool getDate = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->getdate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SeriesRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 startDate = 1;
    if (has_startdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startdate());
    }
    
    // optional int32 endDate = 2;
    if (has_enddate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enddate());
    }
    
    // optional int32 asOfDate = 3;
    if (has_asofdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->asofdate());
    }
    
    // optional bool eventAdjusted = 6;
    if (has_eventadjusted()) {
      total_size += 1 + 1;
    }
    
    // optional bool getRevision = 7;
    if (has_getrevision()) {
      total_size += 1 + 1;
    }
    
    // optional bool getSecurityId = 8;
    if (has_getsecurityid()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool getDate = 9;
    if (has_getdate()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .symbology.Security security = 4;
  total_size += 1 * this->security_size();
  for (int i = 0; i < this->security_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->security(i));
  }
  
  // repeated .symbology.CounterParty counteryParty = 5;
  total_size += 1 * this->counteryparty_size();
  for (int i = 0; i < this->counteryparty_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->counteryparty(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeriesRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SeriesRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SeriesRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SeriesRequest::MergeFrom(const SeriesRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  security_.MergeFrom(from.security_);
  counteryparty_.MergeFrom(from.counteryparty_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_startdate(from.startdate());
    }
    if (from._has_bit(1)) {
      set_enddate(from.enddate());
    }
    if (from._has_bit(2)) {
      set_asofdate(from.asofdate());
    }
    if (from._has_bit(5)) {
      set_eventadjusted(from.eventadjusted());
    }
    if (from._has_bit(6)) {
      set_getrevision(from.getrevision());
    }
    if (from._has_bit(7)) {
      set_getsecurityid(from.getsecurityid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_getdate(from.getdate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SeriesRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeriesRequest::CopyFrom(const SeriesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeriesRequest::IsInitialized() const {
  
  return true;
}

void SeriesRequest::Swap(SeriesRequest* other) {
  if (other != this) {
    std::swap(startdate_, other->startdate_);
    std::swap(enddate_, other->enddate_);
    std::swap(asofdate_, other->asofdate_);
    security_.Swap(&other->security_);
    counteryparty_.Swap(&other->counteryparty_);
    std::swap(eventadjusted_, other->eventadjusted_);
    std::swap(getrevision_, other->getrevision_);
    std::swap(getsecurityid_, other->getsecurityid_);
    std::swap(getdate_, other->getdate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SeriesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeriesRequest_descriptor_;
  metadata.reflection = SeriesRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* EntityRequest_Entity_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntityRequest_Entity_descriptor_;
}
bool EntityRequest_Entity_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const EntityRequest_Entity EntityRequest::CURRENCY;
const EntityRequest_Entity EntityRequest::COUNTRY;
const EntityRequest_Entity EntityRequest::MARKET;
const EntityRequest_Entity EntityRequest::INSTRUMENT;
const EntityRequest_Entity EntityRequest::COUNTER_PARTY;
const EntityRequest_Entity EntityRequest::COMPANY;
const EntityRequest_Entity EntityRequest::SECURITY;
const EntityRequest_Entity EntityRequest::SYMBOL;
const EntityRequest_Entity EntityRequest::Entity_MIN;
const EntityRequest_Entity EntityRequest::Entity_MAX;
const int EntityRequest::Entity_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string EntityRequest::_default_payload_;
#ifndef _MSC_VER
const int EntityRequest::kIdFieldNumber;
const int EntityRequest::kPayloadFieldNumber;
#endif  // !_MSC_VER

EntityRequest::EntityRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EntityRequest::InitAsDefaultInstance() {
}

EntityRequest::EntityRequest(const EntityRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EntityRequest::SharedCtor() {
  _cached_size_ = 0;
  payload_ = const_cast< ::std::string*>(&_default_payload_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EntityRequest::~EntityRequest() {
  SharedDtor();
}

void EntityRequest::SharedDtor() {
  if (payload_ != &_default_payload_) {
    delete payload_;
  }
  if (this != default_instance_) {
  }
}

void EntityRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntityRequest_descriptor_;
}

const EntityRequest& EntityRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Symbology_2dRPC_2eproto();  return *default_instance_;
}

EntityRequest* EntityRequest::default_instance_ = NULL;

EntityRequest* EntityRequest::New() const {
  return new EntityRequest;
}

void EntityRequest::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (_has_bit(1)) {
      if (payload_ != &_default_payload_) {
        payload_->clear();
      }
    }
  }
  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EntityRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_id;
        if (input->ExpectTag(18)) goto parse_payload;
        break;
      }
      
      // optional bytes payload = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EntityRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->id(i), output);
  }
  
  // optional bytes payload = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->payload(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EntityRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->id(i), target);
  }
  
  // optional bytes payload = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->payload(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EntityRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bytes payload = 2;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }
    
  }
  // repeated int32 id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EntityRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EntityRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EntityRequest::MergeFrom(const EntityRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_payload(from.payload());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EntityRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityRequest::CopyFrom(const EntityRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityRequest::IsInitialized() const {
  
  return true;
}

void EntityRequest::Swap(EntityRequest* other) {
  if (other != this) {
    id_.Swap(&other->id_);
    std::swap(payload_, other->payload_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EntityRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EntityRequest_descriptor_;
  metadata.reflection = EntityRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace symbology

// @@protoc_insertion_point(global_scope)
