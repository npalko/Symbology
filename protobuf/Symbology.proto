import "Revision.proto";

// Data representations:
// Dates:   int32, yyyymmdd
// Prices:  int32, 2 decimal places 42,949,672.96
// Rates:   int32, 6 decimal places 4,294.967296

package symbology;

// Data Definitions

message Country {
  optional int32 id = 1;
  optional Revision revision = 2;
  optional string name = 3;
  // ISO 3166-1 numeric
  optional int32 isoNumber = 4;
  // ISO 3166-1-alpha-2 code
  optional string iso2Code = 5;
  // ISO 3166-1 alpha-3
  optional string iso3Code = 6;
}
message CountrySeries { 
  repeated Country country = 1; 
}
message Currency {
  optional int32 id = 1;
  optional Revision revision = 2;
  optional string name = 3;
  // ISO 4217 for number and code
  optional int32 isoNumber = 4;
  optional string isoCode = 5;
}
message CurrencySeries { 
  repeated Currency currency = 1;
}
message Market {
  optional int32 id = 1;
  optional Revision revision = 2;
  optional string name = 3;
  // ISO 10383
  optional string isoCode = 4;
  optional Country country = 5;
  optional string city = 6;
  optional string website = 7;
}
message MarketSeries {
  repeated Market market = 1;
}
message Instrument {
  optional int32 id = 1;
  optional Revision revision = 2;
  optional int32 parentId = 3;
  optional string name = 4;
}
message InstrumentSeries {
  repeated Instrument instrument = 1;
}
message CounterParty {
  enum Type {
    ISO = 1;
    SYNTHETIC = 2;
    BROKER = 3;
  } 
  optional int32 id = 1;
  optional Revision revision = 2;
  optional Type type = 3;
  optional string name = 4;
  optional string isoCode = 5;
  optional string website = 6;
}
message CounterPartySeries {
  repeated CounterParty counterParty = 1;
}
message Company {
  optional int32 id = 1;
  optional Revision revision = 2;
  optional string name = 3;
}
message CompanySeries {
  repeated Company company = 1;
}
message Security {
  optional int32 id = 1;
  optional Revision revision = 2;
  optional string name = 3;
  optional Instrument instrument = 4;
  optional Company company = 5;
  optional Currency currency = 6;
  optional int32 strike = 7;
  optional int32 expirationDate = 8;
}
message SecuritySeries {
  repeated Security security = 1;
}
message Symbol {
  enum type {
    CUSIP = 1;
    ISIN = 2;
    SEDOL = 3;
    Vendor = 4;
  }
  optional int32 id = 1;
  optional Revision revision = 2;
  optional Type type = 3;
  optional Currency currency = 4;
  optional Security security = 5;
  optional CounterParty counterParty = 6;
  optional string name = 7;
}
message SymbolSeries {
  repeated Symbol symbol = 1;
}
message ExchangeRate {
  optional int32 id = 1;
  optional Revision revision = 2;
  optional Currency toCurrency = 3;
  optional Currency fromCurrency = 4;
  optional CounterParty counterParty = 5;
  optional int64 time = 6;
  optional int32 rate = 7;
}
message ExchangeRateSeries {
  repeated ExchangeRate exchangeRate = 1;
}
message Price {
  optional int32 id = 1;
  optional Revision revision = 2;
  optional Security security = 3;
  optional CounterParty counterParty = 4;
  optional Currency currency = 5;
  optional int32 date = 6;
  optional int32 bid = 7;
  optional int32 ask = 8;
  optional int32 open = 9;
  optional int32 close = 10;
  optional int32 high = 11;
  optional int32 low = 12;
  optional int32 volume = 13;
  optional int32 return = 14;
}
message PriceSeries {
  repeated Price price = 1;
}
message Event {
  optional int32 id = 1;
  optional Revision revision = 2;
  // dividends - how was the dividend given?
  // splits
  // mergers, divistitures,
}
message EventSeries {
  repeated Event event = 1;
}

// RPC Definitions

// Request: SeriesRequest
// Reply: PriceSeries or EventSeries, depending on the value of 
//   SeriesRequest.Request
// [definition ...]

message SeriesRequest {
  // Request is the type of time series data being requested. It can be either
  // a series of prices or a series of events
  enum Request {
    // Reply is PriceSeries
    OpenPrice = 1;
    ClosePrice = 2;
    HighPrice = 3;
    LowPrice = 4;
    Volume = 5;
    OpenInterest = 6;
    Return = 7;
    // Reply is EventSeries
    Dividend = 8;
    Split = 9;
  }
  // start of data series
  optional int32 startDate = 1;
  
  // end of data series
  optional int32 endDate = 2;
  
  // If true, all data in the series is reported as it was known at endDate 
  // Any revisions to the data that occured after endDate are not included in 
  // the time series.
  optional dataAsOfEndDate = 3;

  // list of Security for which we are requesting data
  repeated Security security = 4; 
  
  // list of CounterParty for which we are requesting data
  repeated CounterParty counteryParty = 5;
  
  // type of data requested (volume, price, etc)
  optional Request request = 6;

  // If true, adjust per-share series data for any stock splits
  optional bool adjustForStockSplit = 7;
  
  optional bool includeRevision = 8;   // include revision history
  optional bool includeSecurityId = 9; // include the securityId for each request
  optional bool includeDate = 10;      // include date for each request
}

// Request: EntityRequest. Request either a list of Ids, or a payload
// Returns: Response, with message corresponding to entity
message EntityRequest {
 enum Entity {
    Currency = 1;
    Country = 2;
    Market = 3;
    Instrument = 4;
    CounterParty = 5;
    Company = 6;
    Security = 7;
    Symbol = 8;
  }
  repeated int32 id = 1;            // Id's requested for given Entity
  optional bytes payload = 2;
  optional Request request = 3;
}
